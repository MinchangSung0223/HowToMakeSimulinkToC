%% Copyright 2022-2023 The MathWorks, Inc.

%if EXISTS(::_MATH_PRIVATE_API_) == 0
%assign ::_MATH_PRIVATE_API_ = 1
%%
%include "block_private_api.tlc"

%% Function: SLibGetMathConstantInfo ===============================================================
%% Abstract:
%%    Return a valid math constant expression with the proper datatype packed
%%    in a record along with the headerfile required to be included.
%%    This function can only be called after funclib.tlc is included.
%%
%function SLibGetMathConstantInfo(ConstName,ioTypeId) void

    %% Test that we can use call the UDD based math function attached to the model
    %assign RTWType = FcnGetMathDataTypeNameFromId(ioTypeId)
    %assign FcnInfo = FEVAL("rtwgettargetfcnlib_nothrow", LibGetModelName(),  ...
        ConstName, RTWType, ...
        ::IsSimBuild)
    %if ISEMPTY(FcnInfo)
        %return ""
    %elseif ISFIELD(FcnInfo,"ErrIdentifier")
        %<SLibReportErrorWithIdAndArgs(FcnInfo.ErrIdentifier, FcnInfo.ErrArguments)>
    %else
        %assign FcnName   = FcnInfo.FcnName
        %assign FcnType   = FcnInfo.FcnType
        %assign HdrFile   = FcnInfo.HdrFile
    %endif

    %assign FcnTypeId = FcnGetDataTypeIdFromName(FcnType)

    %if LibGetDataTypeIdAliasedThruToFromId(FcnTypeId) != ...
        LibGetDataTypeIdAliasedThruToFromId(ioTypeId)
        %assign outputCastBegin = "((%<LibGetDataTypeNameFromId(ioTypeId)>)"
        %assign outputCastEnd   = ")"
    %else
        %assign outputCastBegin = ""
        %assign outputCastEnd   = ""
    %endif
    %% --- Register references

    %if !ISEMPTY(HdrFile)
        %if HdrFile != "<math.h>" && HdrFile != "math.h"
            %if SLibIsMainCodeGenPhase()
                %<FcnTrackHeaderFileUsage(HdrFile, ...
                    ISFIELD(FcnInfo, "HasTLCGenCallBack") && FcnInfo.HasTLCGenCallBack, ...
                    TLC_FALSE)>
            %else
                %assign blockId = getActiveBlockIdx()
                %<CGMODEL_ACCESS("Includes.AddToHeaderTrackCache", blockId , HdrFile, ...
                    ISFIELD(FcnInfo, "HasTLCGenCallBack") && FcnInfo.HasTLCGenCallBack, TLC_FALSE)>
            %endif
        %endif
    %endif
    %assign callExpr = "(" + outputCastBegin + FcnName + outputCastEnd +")"

    %% Need to clean up header file string
    %if ISEMPTY(HdrFile)
        %assign HdrFile = ""
    %elseif !ISSUBSTRING(HdrFile,"<") && ...
        !ISSUBSTRING(HdrFile,"\"")
        %assign HdrFile = "\"" + HdrFile + "\""
    %endif

    %createrecord ConstInfo { Expr callExpr; HeaderFile HdrFile  }

    %return ConstInfo

%endfunction

%% Function: FcnGetMathDataTypeNameFromId ==========================================================
%% Abstract:
%%    Return the canonical (MATLAB plus others) data type name given the
%%    TLC type ID.  Cannot just use SLibGetMLTypeFromId() because support
%%    doesn't exist for all the TLC data types.
%%
%function FcnGetMathDataTypeNameFromId(dTypeId)
    %assign typeName = SLibGetMLDataTypeFromId(dTypeId)
    %if ISEQUAL(typeName,"numeric")
        %%
        %% see if there is a better answer
        %%
        %assign typeName = FcnGetNonBuiltInTypeNameFromId(dTypeId,typeName)
    %endif
    %return typeName
%endfunction %% FcnGetMathDataTypeNameFromId


%% Function: FcnGetNonBuiltInTypeNameFromId ========================================================
%% Abstract:
%%    Return the data type name for nonbuilt-in types
%%
%function FcnGetNonBuiltInTypeNameFromId(dTypeId, typeName)
    %switch dTypeId
      %case ::CompiledModel.tSS_INTEGER
        %return "integer"
      %case ::CompiledModel.tSS_POINTER
        %return "pointer"
      %case ::CompiledModel.tSS_VOID
        %return "void"
      %case ::CompiledModel.tSS_SIZET
        %return "size_t"
      %case ::CompiledModel.tSS_UINTEGER
        %return "uinteger"
      %case ::CompiledModel.tSS_LONG
        %return "long"  %% sbcheck:ok:tlctypes
      %case ::CompiledModel.tSS_ULONG
        %return "ulong"
      %case ::CompiledModel.tSS_LONG_LONG
        %return "long_long"
      %case ::CompiledModel.tSS_ULONG_LONG
        %return "ulong_long"
      %default
        %if LibIsHalfDataType(dTypeId)
            %assign typeName = "half"
        %elseif (FcnIsDataTypeTargetInt(dTypeId) || LibIsDataTypeNewLongestFixpt(dTypeId))
            %% get typeid for non-builtin integers
            %assign typeName = FcnGetNonBuiltInTypeNameFromId(LibGetDataTypeIdAliasedToFromId(dTypeId), typeName)
        %endif
        %return typeName
    %endswitch
%endfunction%% FcnGetNonBuiltInTypeNameFromId

%% Function: FcnGetDataTypeIdFromName ==============================================================
%% Abstract:
%%   Return the TLC data type ID from the given MATLAB, RTW, or C
%%   size-specific data type name.
%%
%%   The current implementation of the math library populates the
%%   function data table (both the default and target registration passes)
%%   before the TLC data type ID's are defined, so MATLAB data type names
%%   are used, with later translation from TLC enums for sanity.
%%
%function FcnGetDataTypeIdFromName(dTypeName)
    %switch dTypeName
      %case "double" %% sbcheck:ok:tlctypes
        %return ::CompiledModel.tSS_DOUBLE
      %case "single"
        %return ::CompiledModel.tSS_SINGLE
      %case "half"
        %return ::CompiledModel.tSS_HALF
      %case "int32"
        %return ::CompiledModel.tSS_INT32
      %case "int16"
        %return ::CompiledModel.tSS_INT16
      %case "int8"
        %return ::CompiledModel.tSS_INT8
      %case "uint32"
        %return ::CompiledModel.tSS_UINT32
      %case "uint16"
        %return ::CompiledModel.tSS_UINT16
      %case "uint8"
        %return ::CompiledModel.tSS_UINT8
      %case "boolean"
      %case "logical"
        %return ::CompiledModel.tSS_BOOLEAN
      %case "pointer"
        %return ::CompiledModel.tSS_POINTER
      %case "integer"
        %return ::CompiledModel.tSS_INTEGER
      %case "uinteger"
        %return ::CompiledModel.tSS_UINTEGER
      %case "long"  %% sbcheck:ok:tlctypes
        %return ::CompiledModel.tSS_LONG
      %case "ulong"
        %return ::CompiledModel.tSS_ULONG
      %case "long_long"
        %return ::CompiledModel.tSS_LONG_LONG
      %case "ulong_long"
        %return ::CompiledModel.tSS_ULONG_LONG
      %case "void"
        %return ::CompiledModel.tSS_VOID
      %case "size_t"
        %return ::CompiledModel.tSS_SIZET
      %default
        %exit "MATHLIB: Unsupported datatype %<dTypeName>."
    %endswitch
%endfunction %% FcnGetDataTypeIdFromName

%% Function: SLibGenFcnCallInfoWithCheck ===========================================================
%% Abstract:
%%  Generate an expression to perform the requested generic run-time function
%%  consuming the required arguments contained in the FcnRec record's ArgList.
%%  This API does NOT support function inlining and returns a function expr (call)
%%  even if the corresponding TflCustom entry exists for the given function and
%%  has InlineFcn parameter set to true. This API is kept for legacy support.
%%  The expression is packed into a record along with the required header file.
%%  The resulting string is not an lvalue.  If the requested generic function
%%  is not supported, the empty string "" is returned.
%%
%%  If output type does not match generic output type, an output cast is added.
%%  If an input arg type does not match the generic input type, a cast is
%%  added to the input argument.
%%
%%  FcnRec record definition:
%%    Name      - generic function name
%%    RetTypeId - generic function return type (tSS_DOUBLE, etc.)
%%    NumArgs   - length of ArgList
%%    ArgList   - record array containing these fields:
%%                Expr    - Expression for argument instance (string)
%%                TypeId  - datatype ID of argument instance
%%                IsPtr   - arg is a pointer
%%                IsCplx  - arg is complex
%%                IsConst - arg is const (read-only)
%%
%function SLibGenFcnCallInfoWithCheck(FcnRec, allowCustomization, nameOnly) void

    %copyrecord FcnRecForTfl FcnRec

    %assign isRetVoid = ISFIELD(FcnRec, "RetTypeId")
    %% Convert the TypeIDs into strings
    %assign RetTypeIsPtr = []
    %assign RetTypeId = []
    %if isRetVoid == TLC_TRUE
        %assign RetTypeId = FcnRec.RetTypeId
        %assign RetTypeIsPtr = 0
        %if ISFIELD(FcnRec, "IsPtr")
            %if FcnRec.IsPtr == 1
                %assign RetTypeIsPtr = 1
            %endif
        %endif
        %assign FcnRecForTfl.RetTypeId = FcnGetMathDataTypeNameFromId(RetTypeId)
    %endif
    %assign ArgIds = []
    %if FcnRec.NumArgs == 1
        %assign argType = FcnGetMathDataTypeNameFromId(FcnRec.ArgList.TypeId)
        %assign FcnRecForTfl.ArgList.TypeId = argType
    %else
        %foreach k = FcnRec.NumArgs
            %assign argType = FcnGetMathDataTypeNameFromId(FcnRec.ArgList[k].TypeId)
            %assign FcnRecForTfl.ArgList[k].TypeId = argType
        %endforeach
    %endif

    %% Test that we can use call the UDD based math function attached to the model
    %assign FcnInfo = FEVAL("rtwprivate","rtw_tfl_query_nothrow", LibGetModelName(),  FcnRecForTfl, ...
        ::IsSimBuild)

    %if ISEMPTY(FcnInfo)
        %return FcnInfo
    %elseif ISFIELD(FcnInfo,"ErrIdentifier")
        %<SLibReportErrorWithIdAndArgs(FcnInfo.ErrIdentifier, FcnInfo.ErrArguments)>
    %else
        %assign CustomizationEntry = FcnInfo.CustomizationEntry
    %endif

    %if CustomizationEntry == 0 && ISEMPTY(FcnInfo.ImplCallback)

        %if nameOnly == TLC_FALSE
            %assign functionInfo = FcnGenerateFcnCallInfo(FcnRec, FcnRecForTfl, FcnInfo, ...
                isRetVoid, RetTypeId, RetTypeIsPtr)
            %return functionInfo
        %else
            %assign HdrFile = FcnInfo.HdrFile
            %assign hasTLCGenCallBack = ISFIELD(FcnInfo, "HasTLCGenCallBack") && ...
                FcnInfo.HasTLCGenCallBack
            %if SLibIsMainCodeGenPhase()
                %<FcnTrackHeaderFileUsage(HdrFile, hasTLCGenCallBack, TLC_FALSE)>
            %else
                %assign blockId = getActiveBlockIdx()
                %<CGMODEL_ACCESS("Includes.AddToHeaderTrackCache", blockId , HdrFile, ...
                    hasTLCGenCallBack, TLC_FALSE)>
            %endif
            %return FcnInfo
        %endif
    %else

        %if allowCustomization == TLC_TRUE

            %% For legacy support turn Function Inlining OFF
            %assign FcnInfo.InlineFcn = TLC_FALSE
            %assign vec = FcnGenExprFromIR(FcnRec, FcnInfo)
            %assign callExpr = "%<vec[1]>"
            %if nameOnly == TLC_FALSE
                %createrecord FunctionInfo { Expr callExpr; HeaderFile " "}
            %else
                %assign fcn_name = REGEXPREP(callExpr,"\(([^\}]+)\)","")
                %createrecord FunctionInfo { FcnName fcn_name}
            %endif
            %return FunctionInfo
        %else
            %return []
        %endif
    %endif

%endfunction %% SLibGenFcnCallInfo


%function FcnStripVoidPointerCast(argExpr) void
    %return CGMODEL_ACCESS("CGModel.stripVoidPointerCast", argExpr)
%endfunction


%% Function: FcnGenerateFcnCallInfo ================================================================
%% Abstract:
%%  Helper function to generate the function call expression.
%function FcnGenerateFcnCallInfo( FcnRec, FcnRecForTfl, FcnInfo, ...
    isRetVoid, RetTypeId, RetTypeIsPtr) void

    %assign FcnName   = FcnInfo.FcnName
    %assign FcnType   = FcnInfo.FcnType
    %assign RetIsPtr  = FcnInfo.IsPtr
    %assign HdrFile   = FcnInfo.HdrFile
    %assign NumInputs = FcnInfo.NumInputs
    %assign Args      = FcnInfo.Args
    %assign hasTLCGenCallBack = ISFIELD(FcnInfo, "HasTLCGenCallBack") && ...
        FcnInfo.HasTLCGenCallBack
    %assign fixVoidCasts = CGMODEL_ACCESS("CGModel.getFixCastsForCRLMemset")

    %if FcnInfo.NumDWorkArgs > 1
        %% START_ASSERT
        %assign msg = "TLC cannot handle more than one DWork argument at this time."...
            "Please rework the TFL entry for (%<FcnName>.)"
        %<LibReportFatalError(msg)>
        %% END_ASSERT
    %endif


    %if isRetVoid == TLC_TRUE
        %assign FcnTypeId = FcnGetDataTypeIdFromName(FcnType)
        %% Type cast the return value if needed
        %assign outExpr = SLibGenCastExpr(FcnTypeId, RetIsPtr, RetTypeId, RetTypeIsPtr)
        %assign outExpr = outExpr + FcnName + "("
    %else
        %assign outExpr = FcnName + "("
    %endif
    %% Generate the callsite arg list

    %if NumInputs == 1
        %if Args.Name != "u1" && Args.Name != "d1"
            %% START_ASSERT
            %assign msg = "TLC cannot handle injected constants at this time."...
                "Please rework the TFL entry for (%<FcnName>, %<FcnRecForTfl.ArgList.TypeId>)."...
                "Hint: arg name %<Args.Name> may be problematic."
            %<LibReportFatalError(msg)>
            %% END_ASSERT
        %endif

        %% Type cast the input arg if needed
        %assign ArgTypeId = FcnGetDataTypeIdFromName(Args.Type)
        %if Args.Name == "u1"
            %assign castExpr = SLibGenCastExpr(FcnRec.ArgList.TypeId, FcnRec.ArgList.IsPtr, ArgTypeId, Args.IsPtr)
            %assign outExpr = "%<outExpr>%<castExpr>%<FcnRec.ArgList.Expr>"
        %elseif Args.Name == "d1"
            %assign castExpr = SLibGenCastExprDoublePtr(FcnRec.DWorkArgList.TypeId, ...
                FcnRec.DWorkArgList.IsPtr, FcnRec.DWorkArgList.IsDoublePtr, ...
                ArgTypeId, Args.IsPtr, Args.IsDoublePtr)
            %if Args.IsDoublePtr == 1 && FcnRec.DWorkArgList.IsPtr == 1 && FcnRec.DWorkArgList.IsDoublePtr == 0
                %assign dwork = "&%<FcnRec.DWorkArgList.Expr>"
            %else
                %assign dwork = "%<FcnRec.DWorkArgList.Expr>"
            %endif
            %assign outExpr = "%<outExpr>%<castExpr>%<dwork>"
        %endif
    %else
        %% Check for output remapping. Error out if remapping occurred.
        %foreach k = NumInputs
            %if "y1" == Args[k].Name
                %% START_ASSERT
                %assign msg = "TLC cannot handle mapping function ouput as input argument at this time."...
                    "Please rework the TFL entry for (%<FcnName>, %<Args[k].Type>)."...
                    "Hint: arg name %<Args[k].Name> must be a returned from function %<FcnName>."
                %<LibReportFatalError(msg)>
                %% END_ASSERT
            %endif
        %endforeach

        %foreach k = NumInputs
            %if k > 0
                %if !FEVAL("rem",k,2)
                    %assign comma = ",\n"
                %else
                    %assign comma = ", "
                %endif
            %else
                %assign comma = ""
            %endif

            %% Determine if the argument is in the correct order
            %% Args[] - array of prototype arguments
            %% FcnRec.Args[] - array of "conceptual args"
            %% Assumes the "conceptual arg" names are in order, u1, ..., un
            %% Does not handle the case of multiple args with the same name
            %assign found = 0
            %assign dworkfound = 0
            %% Find the correct index (argument reordering)
            %% Here's a truth table for the simple two arg reordering case
            %% foo( single u1, single u2 ) -> foo( single u2, double u1 )
            %%
            %% k  m  argName  Args[k].Name Args[k].Type index FcnRec.Args[index].Type
            %% =  =  ======   ============ ============ ===== =======================
            %% 0  0     -            -            -       -         -
            %% 0  1    u2           u2         single     1        single
            %% 1  0    u1           u1         double     0        single <- cast input
            %% 1  1     -            -            -       -         -
            %foreach m = FcnRec.NumArgs
                %assign argName = "u%<m+1>"
                %if argName == Args[k].Name
                    %assign index = m
                    %assign found = 1
                    %break
                %endif
            %endforeach

            %if found == 0
                %foreach m = FcnRec.NumDWorkArgs
                    %assign argName = "d%<m+1>"
                    %if argName == Args[k].Name
                        %assign index = m
                        %assign dworkfound = 1
                        %break
                    %endif
                %endforeach
            %endif

            %if found == 1
                %% Type cast the input arg if needed
                %if FcnRec.NumArgs == 1
                    %assign argListTypeId = FcnRec.ArgList.TypeId
                %else
                    %assign argListTypeId = FcnRec.ArgList[index].TypeId
                %endif
                %if Args[k].IsPtr==1 && ((argListTypeId != tSS_VOID) || !fixVoidCasts)
                    %assign ArgTypeId = tSS_POINTER
                %else
                    %assign ArgTypePlain = SLibStripQualifiers(Args[k].Type)
                    %assign ArgTypeId = FcnGetDataTypeIdFromName(ArgTypePlain)
                %endif
                %if FcnRec.NumArgs == 1
                    %assign castExpr = SLibGenCastExpr(FcnRec.ArgList.TypeId, FcnRec.ArgList.IsPtr, ArgTypeId, Args[k].IsPtr)
                    %assign argExpr = STRING(FcnRec.ArgList.Expr)
                %else
                    %assign castExpr = SLibGenCastExpr(FcnRec.ArgList[index].TypeId, FcnRec.ArgList[index].IsPtr, ArgTypeId, Args[k].IsPtr)
                    %assign argExpr = STRING(FcnRec.ArgList[index].Expr)
                %endif
                %if fixVoidCasts && !WHITE_SPACE(castExpr)
                    %assign argExpr = FcnStripVoidPointerCast(argExpr)
                %endif
                %assign outExpr = "%<outExpr>%<comma>%<castExpr>%<argExpr>"
            %elseif dworkfound == 1
                %assign ArgTypeId = FcnGetDataTypeIdFromName(Args[k].Type)
                %if FcnRec.NumDWorkArgs == 1
                    %assign castExpr = SLibGenCastExprDoublePtr(FcnRec.DWorkArgList.TypeId, ...
                        FcnRec.DWorkArgList.IsPtr, FcnRec.DWorkArgList.IsDoublePtr, ...
                        ArgTypeId, Args[k].IsPtr, Args[k].IsDoublePtr)
                    %if Args[k].IsDoublePtr == 1 && FcnRec.DWorkArgList.IsPtr == 1 && FcnRec.DWorkArgList.IsDoublePtr == 0
                        %assign dwork = "&%<FcnRec.DWorkArgList.Expr>"
                    %else
                        %assign dwork = "%<FcnRec.DWorkArgList.Expr>"
                    %endif
                    %if fixVoidCasts && !WHITE_SPACE(castExpr)
                        %assign dwork = FcnStripVoidPointerCast(dwork)
                    %endif
                %else
                    %assign castExpr = SLibGenCastExprDoublePtr(FcnRec.DWorkArgList.TypeId, ...
                        FcnRec.DWorkArgList[index].IsPtr, FcnRec.DWorkArgList[index].IsDoublePtr, ...
                        ArgTypeId, Args[k].IsPtr, Args[k].IsDoublePtr)
                    %if Args[k].IsDoublePtr == 1 && FcnRec.DWorkArgList[index].IsPtr == 1 && FcnRec.DWorkArgList[index].IsDoublePtr == 0
                        %assign dwork = "&%<FcnRec.DWorkArgList[index].Expr>"
                    %else
                        %assign dwork = "%<FcnRec.DWorkArgList[index].Expr>"
                    %endif
                    %if fixVoidCasts && !WHITE_SPACE(castExpr)
                        %assign dwork = FcnStripVoidPointerCast(dwork)
                    %endif
                %endif
                %assign outExpr = "%<outExpr>%<comma>%<castExpr>%<dwork>"
            %else
                %assign outExpr = "%<outExpr>%<comma>%<FcnInfo.Args[k].Expr>"
            %endif

        %endforeach
    %endif

    %% Don't add header file to shared includes until all error checking is complete
    %if SLibIsMainCodeGenPhase()
        %<FcnTrackHeaderFileUsage(HdrFile, hasTLCGenCallBack, TLC_FALSE)>
    %else
        %assign blockId = getActiveBlockIdx()
        %<CGMODEL_ACCESS("Includes.AddToHeaderTrackCache", blockId , HdrFile, ...
            hasTLCGenCallBack, TLC_FALSE)>
    %endif

    %assign callExpr = "%<outExpr>)"

    %% Need to clean up header file string
    %if !ISEMPTY(HdrFile) && ...
        !ISSUBSTRING(HdrFile, "<") && ...
        !ISSUBSTRING(HdrFile,"\"")
        %assign HdrFile = "\"" + HdrFile + "\""
    %endif
    %createrecord FunctionInfo { Expr callExpr; HeaderFile HdrFile; FunctionName FcnName }

    %if !ISEMPTY(HdrFile) && !SLibIsCompactFileFormat()
        %<SLibUpdateGlobalSymbolTableForFile(HdrFile, FcnName)>
    %endif

    %return FunctionInfo
%endfunction %% FcnGenerateFcnCallInfo


%% Function: FcnGenExprFromIR ======================================================================
%% Abstract:
%%  The function creates the record of the given function and
%%  calls "rtwcgtlc" MEX function. The MEX function in turn
%%  calls into CGIR and gets either the inlined expression or
%%  the function call expression for the given function.
%%
%function FcnGenExprFromIR( FcnRec, FcnInfo) void
    %assign RetType = FcnGetMathDataTypeNameFromId(FcnRec.RetTypeId)

    %if ISFIELD(FcnRec, "RetExpr")
        %assign RetExpr = "%<FcnRec.RetExpr>"
    %else
        %assign RetExpr = "yout"
    %endif

    %createrecord RecForTfl {RetTypeId RetType; RetName RetExpr; Key FcnRec.Name; ...
        NumArgs FcnRec.NumArgs; InlineFcn FcnInfo.InlineFcn}

    %if FcnRec.NumArgs == 1
        %assign InputType = FcnGetMathDataTypeNameFromId(FcnRec.ArgList.TypeId)
        %addtorecord RecForTfl ArgList { TypeId InputType; Name FcnRec.ArgList.Expr }
    %else
        %foreach k = FcnRec.NumArgs
            %assign InputType = FcnGetMathDataTypeNameFromId(FcnRec.ArgList[k].TypeId)
            %addtorecord RecForTfl ArgList { TypeId InputType; Name FcnRec.ArgList[k].Expr }
        %endforeach
    %endif
    %assign rtwCtx = CGMODEL_ACCESS("CGModel.GetRTWContext")
    %if ISEMPTY(rtwCtx)
        %error "This math library function is not available if the TLC command is invoked offline"
    %endif
    %assign vec = FEVAL("rtwprivate", "rtwcustomtfl", rtwCtx, RecForTfl)
    %assign headers = vec[3]
    %foreach idx = SIZE(headers, 0)
        %if SLibIsMainCodeGenPhase()
            %<FcnTrackHeaderFileUsage(headers[idx], TLC_FALSE, TLC_FALSE)>
        %else
            %assign blockId = getActiveBlockIdx()
            %<CGMODEL_ACCESS("Includes.AddToHeaderTrackCache", blockId , headers[idx], ...
                TLC_FALSE, TLC_FALSE)>
        %endif
    %endforeach
    %return vec
%endfunction %% FcnGenExprFromIR


%% Function: SLibGenCastExpr =======================================================================
%%  Abstract: This function generates a cast expression if the two
%%  input arguments are not the same time. If the args are the same
%%  an empty string is returned
%%
%function SLibGenCastExpr(FromDataType, FromIsPtr, ToDataType, ToIsPtr) void
    %return SLibGenCastExprDoublePtr(FromDataType, FromIsPtr, TLC_FALSE, ToDataType, ToIsPtr, TLC_FALSE)
%endfunction

%% Function: SLibGenCastExprDoublePtr ==============================================================
%%  Abstract: This function generates a cast expression if the two
%%  input arguments are not the same time. If the args are the same
%%  an empty string is returned
%%
%function SLibGenCastExprDoublePtr(FromDataType, FromIsPtr, FromIsDoublePtr, ToDataType, ToIsPtr, ToIsDoublePtr) void
    %if LibGetDataTypeIdAliasedThruToFromId(FromDataType) != ...
        LibGetDataTypeIdAliasedThruToFromId(ToDataType) || ...
        (FromIsPtr != ToIsPtr && ToIsDoublePtr == TLC_FALSE) || ...
        (FromIsDoublePtr != ToIsDoublePtr)
        %if (ToDataType == tSS_INTEGER)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "int" + "%<IntegerSizes.IntNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "int"
            %endif
        %elseif (ToDataType == tSS_UINTEGER)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "uint" + "%<IntegerSizes.IntNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "unsigned int"
            %endif
        %elseif (ToDataType == tSS_SIZET)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "uint" + "%<IntegerSizes.IntNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "size_t"
            %endif
        %elseif (ToDataType == tSS_LONG)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "int" + "%<IntegerSizes.LongNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "long"
            %endif
        %elseif (ToDataType == tSS_ULONG)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "uint" + "%<IntegerSizes.LongNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "unsigned long"
            %endif
        %elseif (ToDataType == tSS_LONG_LONG)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "int" + "%<IntegerSizes.LongLongNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "long long"
            %endif
        %elseif (ToDataType == tSS_ULONG_LONG)
            %assign FromDataTypeName = FcnGetMathDataTypeNameFromId(FromDataType)
            %assign numBitsStr = "uint" + "%<IntegerSizes.LongLongNumBits>"
            %if ((FromDataTypeName == numBitsStr) ...
                || (FromDataTypeName == FcnGetNonBuiltInTypeNameFromId(ToDataType,"")))
                %return ""
            %else
                %assign typeName = "unsigned long long"
            %endif
        %elseif (ToDataType == tSS_VOID)
            %if (FromDataType != tSS_VOID)
                %assign typeName = "void"
            %else
                %return ""
            %endif
        %else
            %assign typeName = LibGetDataTypeNameFromId(ToDataType)
        %endif
        %assign ptrExpr = ""
        %if ToIsPtr == 1
            %assign ptrExpr = "*"
        %elseif ToIsDoublePtr == 1
            %if FromIsPtr == 1
                %assign ptrExpr = "*"
            %else
                %assign ptrExpr = "**"
            %endif
        %endif
        %assign castExpr = "(%<typeName>" + ptrExpr + ")"
        %if castExpr == "(pointer_T)" || castExpr == "(pointer_T*)"
            %assign castExpr = ""
        %endif
    %else
        %assign castExpr = ""
    %endif
    %return castExpr
%endfunction %% SLibGenCastExpr

%% Function: SLibGenCastExpr =======================================================================
%%  Abstract: This function generates a cast expression if the two
%%  input arguments are not the same time. If the args are the same
%%  an empty string is returned
%%
%function SLibStripQualifiers(DataTypeStr) void
    %assign plainT = DataTypeStr
    %if ISSUBSTRING(plainT,"const")
        %assign plainT = STRREP(plainT,"const ","")
    %elseif ISSUBSTRING(plainT,"volatile")
        %assign plainT = STRREP(plainT,"volatile ","")
    %endif
    %return plainT
%endfunction


%% Function: SLibGenFcnCallInfo ====================================================================
%% Abstract:
%%  Generate an expression to perform the requested generic run-time function
%%  consuming the required arguments contained in the FcnRec record's ArgList.
%%  This API does NOT support function inlining and returns a function expr (call)
%%  even if the corresponding TflCustom entry exists for the given function and
%%  has InlineFcn parameter set to true. This API is kept for legacy support.
%%  The expression is packed into a record along with the required header file.
%%  The resulting string is not an lvalue.  If the requested generic function
%%  is not supported, the empty string "" is returned.
%%
%%  If output type does not match generic output type, an output cast is added.
%%  If an input arg type does not match the generic input type, a cast is
%%  added to the input argument.
%%
%%  FcnRec record definition:
%%    Name      - generic function name
%%    RetTypeId - generic function return type (tSS_DOUBLE, etc.)
%%    NumArgs   - length of ArgList
%%    ArgList   - record array containing these fields:
%%                Expr    - Expression for argument instance (string)
%%                TypeId  - datatype ID of argument instance
%%                IsPtr   - arg is a pointer
%%                IsCplx  - arg is complex
%%                IsConst - arg is const (read-only)
%%
%function SLibGenFcnCallInfo(FcnRec) void
    %assign fcnInfo =SLibGenFcnCallInfoWithCheck(FcnRec, TLC_TRUE, TLC_FALSE)
    %if ISEMPTY(fcnInfo)
        %return ""
    %endif
    %return fcnInfo
%endfunction %% SLibGenFcnCallInfo

%function getActiveBlockIdx() void
    %if EXISTS(BlockIdx[0])
        %return BlockIdx[0]
    %else
        %return -1
    %endif
%endfunction
%endif


%function SLibGenMemFcnCallInfo(fcnName, input0Arg, input1Arg, input2Arg) void
    %switch fcnName
      %case "memcpy"
        %createrecord FcnRec { Name fcnName; RetTypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0; NumArgs 3 }
        %addtorecord FcnRec ArgList { Expr input0Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0 }
        %addtorecord FcnRec ArgList { Expr input1Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0 }
        %addtorecord FcnRec ArgList { Expr input2Arg; TypeId FcnGetDataTypeIdFromName("size_t"); IsPtr 0; IsCplx 0; IsConst 0 }
        %break
      %case "memset"
        %% check for memset value 0
        %% Strip out spaces since TLC does not pass them to MATLAB correctly
        %assign input0Arg = FcnReplaceCCastWithStaticCastForCPP(input0Arg)
        %assign input1Arg_tmp = ""
        %if TYPE(input1Arg) != "String"
            %assign input1Arg_tmp = "%<input1Arg>"
        %else
            %foreach idx = SIZE(input1Arg,1)
                %if input1Arg[idx] != " "
                    %assign input1Arg_tmp = input1Arg_tmp + "%<input1Arg[idx]>"
                %endif
            %endforeach
        %endif
        %assign memsetZero = TLC_FALSE
        %if !CONTAINS(input1Arg_tmp,"[^0.]")
            %assign memsetZero = TLC_TRUE
        %endif
        %% Check for memset to non-zero values with portable word sizes when
        %% char is a different size on host and target otherwise incorrect
        %% behaviour will occur.   Consider, 16-bit word addressable architecture
        %% with sizeof(int16) == 1, sizeof(char) == 1:
        %%
        %% 1) memset value 10 to one 16-bit element:
        %%    sizeof(int16) is 2 on host and therefore 10 will be repeated
        %%    twice within the int16.
        %%
        %% 2) memset value of 320 to one 16-bit element:
        %%    i) 320 fits into a 16-bit char on-target, but ends up as 64 on the
        %%    host.
        %%    ii) Again, value 64 is repeated twice within the int16.
        %%
        %% Further consider the case of an int8 emulated inside a 16-bit
        %% word sized container:
        %%
        %% 3) Generated code memset's value 10 to one 16-bit element (the container).
        %%    Same problem as #1, 10 will be repeated twice within the container.
        %%    In some circumstances this behavior may be ok, i.e. if the generated
        %%    code only manipulates the low 8-bits of the container, but we do not
        %%    assume that is always ok => error.
        %%
        %% Note that memset to 0 is ok in all the above scenarios. It would take an
        %% extremely large memset for the "n" input argument, owing to the potential
        %% sizeof multiplication factor, to overflow size_t (32 or 64-bit) on the host.
        %%
        %if (%<CGMODEL_ACCESS("CGModel.ConfigSet", "PortableWordSizes")> == 1) && !memsetZero
            %assign HostSizes = FEVAL("rtwprivate", "rtwhostwordlengths")
            %if IntegerSizes.CharNumBits != HostSizes.CharNumBits
                %assign args = ["%<IntegerSizes.CharNumBits>", "%<CAST("Number", HostSizes.CharNumBits)>"]
                %<SLibReportErrorWithIdAndArgs("RTW:tlc:PWSNonZeroTLCMemset", args)>
            %endif
        %endif
        %if EXISTS(::Memset2Zero) && ::Memset2Zero==1
            %if memsetZero
                %% doing a memset to zero. See if there is a replacement for this.
                %createrecord FcnRec { Name "memset2zero"; RetTypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0; NumArgs 3 }
                %addtorecord FcnRec ArgList { Expr input0Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0 }
                %addtorecord FcnRec ArgList { Expr input1Arg; TypeId FcnGetDataTypeIdFromName("integer"); IsPtr 0; IsCplx 0; IsConst 0 }
                %addtorecord FcnRec ArgList { Expr input2Arg; TypeId FcnGetDataTypeIdFromName("size_t"); IsPtr 0; IsCplx 0; IsConst 0 }
                %assign fcnCall = SLibGenFcnCallInfo(FcnRec)
                %if !ISEMPTY(fcnCall)
                    %return fcnCall
                %endif
            %endif
        %endif
        %createrecord FcnRec { Name fcnName; RetTypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0; NumArgs 3 }
        %addtorecord FcnRec ArgList { Expr input0Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 0 }
        %addtorecord FcnRec ArgList { Expr input1Arg; TypeId FcnGetDataTypeIdFromName("integer"); IsPtr 0; IsCplx 0; IsConst 0 }
        %addtorecord FcnRec ArgList { Expr input2Arg; TypeId FcnGetDataTypeIdFromName("size_t"); IsPtr 0; IsCplx 0; IsConst 0 }
        %break
      %case "memcmp"
        %createrecord FcnRec { Name fcnName; RetTypeId FcnGetDataTypeIdFromName("integer"); IsPtr 0; IsCplx 0; IsConst 0; NumArgs 3 }
        %addtorecord FcnRec ArgList { Expr input0Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 1 }
        %addtorecord FcnRec ArgList { Expr input1Arg; TypeId FcnGetDataTypeIdFromName("void"); IsPtr 1; IsCplx 0; IsConst 1 }
        %addtorecord FcnRec ArgList { Expr input2Arg; TypeId FcnGetDataTypeIdFromName("size_t"); IsPtr 0; IsCplx 0; IsConst 0 }
        %break
      %default
        %exit "MATHLIB: Unsupported function %<fcnName>."
    %endswitch
    %return SLibGenFcnCallInfo(FcnRec)
%endfunction

%function FcnTrackHeaderFileUsageHelper(HdrFile, hasTLCGenCallBack, isGeneratedUtility) void
    %if SLibIsMainCodeGenPhase()
        %<FcnTrackHeaderFileUsage(HdrFile, hasTLCGenCallBack, isGeneratedUtility)>
    %else
        %assign blockId = getActiveBlockIdx()
        %<CGMODEL_ACCESS("Includes.AddToHeaderTrackCache", blockId , HdrFile, ...
            hasTLCGenCallBack, isGeneratedUtility)>
    %endif
%endfunction

%% Function: FcnTrackSharedUtilHeaderFileUsage =====================================================
%% Abstract:
%%   Higher-level routine for tracking header files for MATLAB/Simulink
%%   utilities.  Do not call this for legacy header files, e.g. for CRL
%%   header files
%function FcnTrackSharedUtilHeaderFileUsage(HdrFile, hasTLCGenCallBack) void
    %if ::CompiledModel.GenUtilsSrcInSharedLocation == 1
        %<FcnTrackHeaderFileUsageHelper(HdrFile, hasTLCGenCallBack, TLC_TRUE)>
    %endif
    %<FcnTrackSharedUtilHeaderFileUsageForFCTFile(HdrFile)>
%endfunction
