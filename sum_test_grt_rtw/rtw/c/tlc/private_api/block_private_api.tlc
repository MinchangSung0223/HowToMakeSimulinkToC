%if !EXISTS(::_BLOCK_PRIVATE_API_)
%assign ::_BLOCK_PRIVATE_API_ = 1
%%
%% Copyright 2019-2022 The MathWorks, Inc.
%%

%% Function{Block Functions}: SLibInBlockScope
%% Abstract:
%%   Returns true if this function is called within the scope of a block record
%%
%function SLibInBlockScope() void
    %return EXISTS(BlockIdx)
%endfunction


%% Function{Block Functions}: SLibGetCurrentBlock
%% Abstract:
%%   Returns the current block record if this function is called within the
%%   scope of this block record.
%%
%function SLibGetCurrentBlock() void
    %assert SLibInBlockScope()
    %assign self = ::CompiledModel.System[BlockIdx[0]].Block[BlockIdx[2]]
    %if self.BlockIdx[0] != BlockIdx[0] || self.BlockIdx[2] != BlockIdx[2]
        %error "Incoherent BlockIdx in record."
    %endif
    %return self
%endfunction

%% Function{Block Functions}: SLibBlockIsExpressionCompliant
%% Abstract:
%%   Returns true if this block's TLC file is compliant with expression folding.
%%   To be called in BlockSetupAndCompatiblityCheck function.
%%
%function SLibBlockIsExpressionCompliant(block) void
    %% TLCExprCompliant
    %return CGMODEL_ACCESS("Block.GetTLCExpressionCompliance", ...
        block.BlockIdx[0], block.BlockIdx[2])
%endfunction

%% Function{Block Functions}: SLibBlockIntegerDowncastRequired
%% Abstract:
%%   Returns true if this block needs to enforce integer downcasts for its
%%   output expression.
%%
%function SLibBlockIntegerDowncastRequired(block) void
    %% EnforceIntegerDowncast
    %return CGMODEL_ACCESS("Block.GetEnforceIntegerDowncast", ...
        block.BlockIdx[0], block.BlockIdx[2])
%endfunction

%% Function{Block Functions}: SLibBlockGetCustomStorageComplianceLevel
%% Abstract:
%%   Returns the custom storage compliance level of a block
%%
%function SLibBlockGetCustomStorageComplianceLevel(block) void
    %% CustomStorageClassCompliant
    %return CGMODEL_ACCESS("Block.GetCSCComplianceLevel", ...
        block.BlockIdx[0], block.BlockIdx[2])
%endfunction

%% Function: LibBlockInlineAsLiteralText
%% Abstract:
%%   This function notifies Simulink Coder that the code generated by the
%%   block should be inlined as literal text, when it is called from the
%%   BlockInstanceSetup function. Notice that it is recommended to call
%%   LibBlockInlineUsingCompiler instead, in order enable compatibility with
%%   Simulink Design Verifier, Simulink PLC Coder and Simulink GPU Coder,
%%   as well as better support Simulink accelerated simulations.
%%   Notice that this is a alpha version of this unreleased feature and is not
%%   compatible with every feature.
%%
%function LibBlockInlineAsLiteralText(block) void
    %if SLibIsPreCodeGenPhase()
        %if "BlockInstanceSetup" == ::BlockFcn
            %<CGMODEL_ACCESS("Block.SetInlineAsLiteralText", block.BlockIdx[0], ...
                block.BlockIdx[2])>
        %else
            %assign errMsg = "LibBlockInlineAsLiteralText must be called from the " + ...
                "BlockInstanceSetup function."
            %<LibReportError(errMsg)>
        %endif
    %endif
%endfunction

%% Function: LibBlockInlineUsingCompiler
%% Abstract:
%%   This function notifies Simulink Coder that the code generated by the block
%%   should be compiled to better support Simulinks code generation infrastructure.
%%   Calling this function in BlockInstanceSetup will enable compatibility with
%%   Simulink Design Verifier, Simulink PLC Coder and Simulink GPU Coder,
%%   as well as better support Simulink accelerated simulations.
%%   Notice that this is a alpha version of this unreleased feature and is not
%%   compatible with every feature.
%%
%function LibBlockInlineUsingCompiler(block) void
    %if SLibIsPreCodeGenPhase()
        %if "BlockInstanceSetup" == ::BlockFcn
            %<CGMODEL_ACCESS("Block.SetInlineUsingCompiler", block.BlockIdx[0], ...
                block.BlockIdx[2])>
        %else
            %assign errMsg = "LibBlockInlineUsingCompiler must be called from the " + ...
                "BlockInstanceSetup function."
            %<LibReportError(errMsg)>
        %endif
    %endif
%endfunction

%% Function: LibEnableBlockFcnOptimizations
%% Abstract:
%%  This function enables optimization of block function (such as Outputs or Update)
%%  code. It alows Simulink Coder to analyse the code generated by block using TLC
%%  and enable appropriate optimizations.
%%  Notice that this function is currently in development and not all TLC blocks and
%%  targets are supported.
%%
%function LibEnableBlockFcnOptimizations(block) void
    %<LibBlockInlineAsLiteralText(block)>
%endfunction

%% Function: SLibIsNextGenTLCInterfaceEnabled
%% Abstract:
%%  The function returns true if the next generation TLC interface (v3) is enabled for
%%  a given block.
%%
%function SLibIsNextGenTLCInterfaceEnabled(block) void
    %return CGMODEL_ACCESS("Block.GetNextGenTLCInterfaceEnabled", block.BlockIdx[0], ...
        block.BlockIdx[2])
%endfunction

%% Function: SLibBlockCodeGenSucceeded
%% Abstract:
%%   This function is used to notify Simulink Coder that the TLC block functions
%%   of a given block have been executed without failure.
%%
%function SLibBlockCodeGenSucceeded(block) void
    %if SLibIsPreCodeGenPhase()
        %<CGMODEL_ACCESS("Block.SetCodeGenSucceeded", block.BlockIdx[0], ...
            block.BlockIdx[2])>
    %endif
%endfunction

%endif %% _BLOCK_PRIVATE_API_
