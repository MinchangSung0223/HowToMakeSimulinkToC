%%
%%
%%
%% Abstract:
%%      TLC file for generating Inf via Target Function Library (TFL).
%%
%% Copyright 2003-2023 The MathWorks, Inc.

%implements "genrtinf" "C"

%% Function: FcnLittleEndianInf ====================================================================
%% Abstract:
%%      Setup code for nonfinte values on little-endian processors
%%
%function FcnLittleEndianInf() Output
    union {
        LittleEndianIEEEDouble bitVal;
        %<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
    tmpVal.bitVal.words.wordL = 0x00000000U;
    inf = tmpVal.fltVal;
%endfunction

%% Function: FcnBigEndianInf =======================================================================
%% Abstract:
%%      Setup code for nonfinte values on big-endian processors
%%
%function FcnBigEndianInf() Output
    union {
        BigEndianIEEEDouble bitVal;
        %<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
    tmpVal.bitVal.words.wordL = 0x00000000U;
    inf = tmpVal.fltVal;
%endfunction

%% Function: FcnLittleEndianMinusInf ===============================================================
%% Abstract:
%%      Setup code for nonfinte values on little-endian processors
%%
%function FcnLittleEndianMinusInf() Output
    union {
        LittleEndianIEEEDouble bitVal;
        %<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
    tmpVal.bitVal.words.wordL = 0x00000000U;
    minf = tmpVal.fltVal;
%endfunction

%% Function: FcnBigEndianMinusInf ==================================================================
%% Abstract:
%%      Setup code for nonfinte values on big-endian processors
%%
%function FcnBigEndianMinusInf() Output
    union {
        BigEndianIEEEDouble bitVal;
        %<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
    tmpVal.bitVal.words.wordL = 0x00000000U;
    minf = tmpVal.fltVal;
%endfunction

%% Function: rtGetInfF =============================================================================
%% Abstract:
%%      GENERATE entry point for Target Function Library TLC callbacks. Creates
%%      header and source file contents for rtGetInfF.
%%
%function rtGetInfF(fctInfo,fileH,fileC) void
    %<rtGetInf(fctInfo,fileH,fileC)>
%endfunction

%% Function: rtGetMinusInf =========================================================================
%% Abstract:
%%      GENERATE entry point for Target Function Library TLC callbacks. Creates
%%      header and source file contents for rtGetMinusInf.
%%
%function rtGetMinusInf(fctInfo,fileH,fileC) void
    %<rtGetInf(fctInfo,fileH,fileC)>
%endfunction

%% Function: rtGetMinusInfF ========================================================================
%% Abstract:
%%      GENERATE entry point for Target Function Library TLC callbacks. Creates
%%      header and source file contents for rtGetMinusInfF.
%%
%function rtGetMinusInfF(fctInfo,fileH,fileC) void
    %<rtGetInf(fctInfo,fileH,fileC)>
%endfunction

%% Function: rtGetInf ==============================================================================
%% Abstract:
%%      GENERATE entry point for Target Function Library TLC callbacks. Creates
%%      header and source file contents for rt_getInf.
%%
%function rtGetInf(fctInfo,fileH,fileC) void

    %if SLibSupportNonfiniteLiterals() && !IsModelReferenceSimTarget()
        %% START_ASSERT
        %assign msg = "Generating nonfinites from TLC"...
            "Should be generating them from C++"
        %<LibReportFatalError(msg)>
        %% END_ASSERT
    %endif

    %% Create header file contents
    %openfile buf
    /*
    * %<fctInfo.FileName>.h
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_banner", fileH, buf)>

    %% For size_t.
    %<SLibCacheUtilCodeToFile("util_hdr_reqed_incl", fileH, "<stddef.h>")>
    %openfile buf
    %<LibEmitPlatformTypeIncludes()>
    #include "rt_nonfinite.h"

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_incl", fileH, buf)>

    %assign doubleName = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %assign singleName = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %assign uint8Name = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign uint16Name = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign msFcn = SLibGetMemSecCategoryForUtilityFcn()
    %openfile buf
    %<FcnGenOpenExternCForCPP()>
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetInf", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<doubleName> rtGetInf(void);
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetInf", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetInfF", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<singleName> rtGetInfF(void);
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetInfF", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetMinusInf", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<doubleName> rtGetMinusInf(void);
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetMinusInf", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetMinusInfF", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<singleName> rtGetMinusInfF(void);
    %<SLibGetFcnMemSecPragmaOnDecl("rtGetMinusInfF", msFcn, "Post")>\
    %<FcnGenCloseExternCForCPP()>
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_infnan_decl", fileH, buf)>

    %% Create source file contents
    %openfile buf
    /*
    * %<fctInfo.FileName>.%<LangFileExt>
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_banner", fileC, buf)>

    %openfile buf
    /*
    * Abstract:
    *      Function to initialize non-finite, Inf
    */
    #include "rtGetInf.h"

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_incl", fileC, buf)>

    %openfile buf
    #define NumBitsPerChar  %<::CompiledModel.ConfigSet.ProdBitPerChar>U
    %closefile buf

    %<SLibCacheMacroToUtilityFile("NumBitsPerChar", buf, "util_src_defines", fileC)>

    %assign scalarTokens = LibGetScalarDataInitTokens()

    %openfile buf

    %if GenCPP
        extern "C" {
    %endif
    %assign fcnName = "rtGetInf"
    %assign fcnReturns = doubleName
    %assign fcnParams = "void"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %openfile fcnAbstract
%%}
Initialize rtInf needed by the generated code.
Inf is initialized as non-signaling. Assumes IEEE.
%%{
    %closefile fcnAbstract

    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
        Category "utility"; GeneratedBy "genrtinf.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec

    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        size_t bitsPerReal%<scalarTokens[0]>sizeof(%<doubleName>) * (NumBitsPerChar)%<scalarTokens[1]>;
        %<doubleName> inf%<scalarTokens[0]>0.0%<scalarTokens[1]>;

        if (bitsPerReal == 32U) {
            inf = rtGetInfF();
        } else {
            %if !SLibIsERTTarget() || ConfigSet.TargetEndianess == "Unspecified" || ConfigSet.PortableWordSizes == 1
                %<uint16Name> one%<scalarTokens[0]>1U%<scalarTokens[1]>;

                enum {
                    LittleEndian,
                    BigEndian
                } machByteOrder%<scalarTokens[0]>(*((%<uint8Name> *) &one) == 1U) ? LittleEndian : BigEndian%<scalarTokens[1]>;

                switch (machByteOrder) {
                    case LittleEndian: {
                        %<FcnLittleEndianInf()>
                        break;
                    }
                    case BigEndian: {
                        %<FcnBigEndianInf()>
                        break;
                    }
                }
            %elseif ConfigSet.TargetEndianess == "LittleEndian"
                %<FcnLittleEndianInf()>
            %elseif ConfigSet.TargetEndianess == "BigEndian"
                %<FcnBigEndianInf()>
            %else
                %openfile errTxt
                Unsupported Target Endianess: %<ConfigSet.TargetEndianess>
                %closefile errTxt
                %<LibReportFatalError(errTxt)>
            %endif
        }
        return inf;
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtGetInfF"
    %assign fcnReturns = singleName
    %assign fcnParams = "void"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %openfile fcnAbstract
%%}
Initialize rtInfF needed by the generated code.
Inf is initialized as non-signaling. Assumes IEEE.
%%{
    %closefile fcnAbstract
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
        Category "utility"; GeneratedBy "genrtinf.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        IEEESingle infF;

        infF.wordL.wordLuint = 0x7F800000U;
        return infF.wordL.wordLreal;
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtGetMinusInf"
    %assign fcnReturns = doubleName
    %assign fcnParams = "void"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %openfile fcnAbstract
%%}
Initialize rtMinusInf needed by the generated code.
Inf is initialized as non-signaling. Assumes IEEE.
%%{
    %closefile fcnAbstract

    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
        Category "utility"; GeneratedBy "genrtinf.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        size_t bitsPerReal%<scalarTokens[0]>sizeof(%<doubleName>) * (NumBitsPerChar)%<scalarTokens[1]>;
        %<doubleName> minf%<scalarTokens[0]>0.0%<scalarTokens[1]>;

        if (bitsPerReal == 32U) {
            minf =  rtGetMinusInfF();
        } else {
            %if !SLibIsERTTarget() || ConfigSet.TargetEndianess == "Unspecified" || ConfigSet.PortableWordSizes == 1
                %<uint16Name> one%<scalarTokens[0]>1U%<scalarTokens[1]>;

                enum {
                    LittleEndian,
                    BigEndian
                } machByteOrder%<scalarTokens[0]>(*((%<uint8Name> *) &one) == 1U) ? LittleEndian : BigEndian%<scalarTokens[1]>;

                switch (machByteOrder) {
                    case LittleEndian: {
                        %<FcnLittleEndianMinusInf()>
                        break;
                    }
                    case BigEndian: {
                        %<FcnBigEndianMinusInf()>
                        break;
                    }
                }
            %elseif ConfigSet.TargetEndianess == "LittleEndian"
                %<FcnLittleEndianMinusInf()>
            %elseif ConfigSet.TargetEndianess == "BigEndian"
                %<FcnBigEndianMinusInf()>
            %else
                %openfile errTxt
                Unsupported Target Endianess: %<ConfigSet.TargetEndianess>
                %closefile errTxt
                %<LibReportFatalError(errTxt)>
            %endif
        }
        return minf;
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtGetMinusInfF"
    %assign fcnReturns = singleName
    %assign fcnParams = "void"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %openfile fcnAbstract
%%}
Initialize rtMinusInfF needed by the generated code.
Inf is initialized as non-signaling. Assumes IEEE.
%%{
    %closefile fcnAbstract

    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
        Category "utility"; GeneratedBy "genrtinf.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        IEEESingle minfF;

        minfF.wordL.wordLuint = 0xFF800000U;
        return minfF.wordL.wordLreal;
    }

    %if GenCPP
    }
    %endif
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_fcn_defn", fileC, buf)>

    %assign headerFile = SLibGetFullFileNameForUtilCode("util_hdr_infnan_decl", fileH)
    %assign sourceFile = SLibGetFullFileNameForUtilCode("util_src_fcn_defn", fileC)
    %assign declDeps = [""]

    %assign defnDeps = [ "size_t", "BigEndianIEEEDouble", "LittleEndianIEEEDouble" ]
    %<SLibAddEntryToFunctionTable("rtGetInf", headerFile, sourceFile, declDeps, defnDeps)>
    %<SLibAddEntryToFunctionTable("rtGetMinusInf", headerFile, sourceFile, declDeps, defnDeps)>

    %assign defnDeps = [ "IEEESingle" ]
    %<SLibAddEntryToFunctionTable("rtGetInfF", headerFile, sourceFile, declDeps, defnDeps)>
    %<SLibAddEntryToFunctionTable("rtGetMinusInfF", headerFile, sourceFile, declDeps, defnDeps)>

    %if GenCPP
        %if ((GenUtilsSrcInSharedLocation == 1) || !SLibIsCompactFileFormat())
            %<SLibUpdateCLinkageHeader(headerFile)>
        %endif
    %endif

    %% Basic type headers for fixed width integer and floating point types (will
    %% resolve to e.g. rtwtypes.h, stdint.h or cstdint depdending on language
    %% standard types setting).
    %assign headerScopeFalse = TLC_FALSE
    %<SLibUpdateSymbolForFunction("rtGetInf", SLibVarGroupBasicTypesFixedWidthInt(), headerScopeFalse)>
    %assign headerScopeTrue = TLC_TRUE
    %<SLibUpdateSymbolForFunction("rtGetInf", SLibVarGroupBasicTypesOther(), headerScopeTrue)>

    %if ((GenUtilsSrcInSharedLocation == 1) || !SLibIsCompactFileFormat())
        %<SLibUpdateHeadersNeededByFile(headerFile, "rt_nonfinite.h")>
    %endif
%endfunction
