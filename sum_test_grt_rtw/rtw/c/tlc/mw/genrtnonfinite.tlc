%%
%%
%%
%% Abstract:
%%      TLC file for generating the nonfinite code via Code Replacement Library (CRL).
%%
%% Copyright 2003-2023 The MathWorks, Inc.

%implements "genrtnonfinite" "C"

%% Function: rt_IsInf/rtIsInfF/rtIsNaN/rtIsNanF ================================
%% Abstract:
%%      GENERATE entry point for Code Replacement Library TLC callbacks. Creates
%%      header and source file contents for nonfinites by calling
%%      rt_InitInfAndNaN
%%
%function rtIsInf(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function rtIsInfF(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function rtIsNaN(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function rtIsNaNF(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction

%% Function: CodeForBinary64NaNCheck
%function CodeForBinary64NaNCheck(endianAwareStruct)
    %return "\
    union {\
        %<endianAwareStruct> bitVal;\
        %<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> fltVal;\
    } tmpVal;\
    tmpVal.fltVal = value;\
    result = (%<LibGetDataTypeNameFromId(::CompiledModel.tSS_BOOLEAN)>)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\
    ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\
    (tmpVal.bitVal.words.wordL != 0) ));\
    "
%endfunction

%% Function: CodeForSwitchOnEndianness
%function CodeForSwitchOnEndianness(codeForLittleEndian, codeForBigEndian) Output
    %if ConfigSet.TargetEndianess == "Unspecified" || ConfigSet.PortableWordSizes == 1
        %assign scalarTokens = LibGetScalarDataInitTokens()
        %assign uint8Name = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
        %assign uint16Name = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
        %<uint16Name> one%<scalarTokens[0]>1U%<scalarTokens[1]>;

        enum {
            LittleEndian,
            BigEndian
        } machByteOrder%<scalarTokens[0]>(*((%<uint8Name> *) &one) == 1U) ? LittleEndian : BigEndian%<scalarTokens[1]>;

        switch (machByteOrder) {
            case LittleEndian: {
                %<codeForLittleEndian>
                break;
            }
            case BigEndian: {
                %<codeForBigEndian>
                break;
            }
        }
    %elseif ConfigSet.TargetEndianess == "LittleEndian"
        %<codeForLittleEndian>
    %elseif ConfigSet.TargetEndianess == "BigEndian"
        %<codeForBigEndian>
    %else
        %openfile errTxt
        Unsupported Target Endianess: %<ConfigSet.TargetEndianess>
        %closefile errTxt
        %<LibReportFatalError(errTxt)>
    %endif
%endfunction

%% Function: rtInf/rtInfF/rtMinusInf/rtMinusInfF/rtNaN/rtNaNF ===================
%% Abstract:
%%      GENERATE entry point for Code Replacement Library TLC callbacks. Creates
%%      header and source file contents for nonfinite constants by calling
%%      rt_InitInfAndNaN. Functions are prefixed with "gen_" to avoid clashing with
%%      TLC reserved keywords.
%%
%function gen_rtInf(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function gen_rtInfF(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function gen_rtMinusInf(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function gen_rtMinusInfF(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function gen_rtNaN(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction
%function gen_rtNaNF(fctInfo,fileH,fileC) void
    %<rt_InitInfAndNaN(fctInfo,fileH,fileC)>
%endfunction


%% Function: rt_InitInfAndNaN ======================================================================
%% Abstract:
%%      GENERATE entry point for Code Replacement Library TLC callbacks. Creates
%%      header and source file contents for nonfinites.
%%
%function rt_InitInfAndNaN(fctInfo,fileH,fileC) void

    %if SLibSupportNonfiniteLiterals() && !IsModelReferenceSimTarget()
        %% START_ASSERT
        %assign msg = "Generating nonfinites from TLC"...
            "Should be generating them from C++"
        %<LibReportFatalError(msg)>
        %% END_ASSERT
    %endif

    %% Check for "CustomNonFinites" variable used to override default support
    %if EXISTS(CustomNonFinites)
        %% Using a custom nonfinites file: modelname, fciInfo, fileH and fileC
        %% are in scope.
        %if FILE_EXISTS(CustomNonFinites)
            %include CustomNonFinites
            %return
        %else
            %% Support file being only on MATLAB path
            %assign customFilePath = FEVAL("which", CustomNonFinites)
            %if (TYPE(customFilePath) == "String") && FILE_EXISTS(customFilePath)
                %include customFilePath
                %return
            %else
                %assign warnTxt = "The CustomNonFinites file, '%<CustomNonFinites >'," ...
                    " was specified, however, the file does not exist. Generating " ...
                    "the default nonfinite support."
                %<LibReportWarning(warnTxt)>
            %endif
        %endif
    %endif

    %% Default nonfinite support

    %% Create header file contents
    %openfile buf
    /*
    * %<fctInfo.FileName>.h
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_banner", fileH, buf)>

    %% For size_t.
    %<SLibCacheUtilCodeToFile("util_hdr_reqed_incl", fileH, "<stddef.h>")>
    %openfile buf
    %<LibEmitPlatformTypeIncludes()>

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_incl", fileH, buf)>

    %assign msFcn = SLibGetMemSecCategoryForUtilityFcn()
    %assign doubleName = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %assign singleName = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %assign booleanName = LibGetDataTypeNameFromId(::CompiledModel.tSS_BOOLEAN)
    %assign uint32Name = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %openfile buf
    #define NOT_USING_NONFINITE_LITERALS 1

    %<FcnGenOpenExternCForCPP()>
    %<SLibApplyMemSecToDataDecl("%<doubleName> rtInf;",       "MemSecDataParameters", "rtInf")>
    %<SLibApplyMemSecToDataDecl("%<doubleName> rtMinusInf;",  "MemSecDataParameters", "rtMinusInf")>
    %<SLibApplyMemSecToDataDecl("%<doubleName> rtNaN;",       "MemSecDataParameters", "rtNaN")>
    %<SLibApplyMemSecToDataDecl("%<singleName> rtInfF;",      "MemSecDataParameters", "rtInfF")>
    %<SLibApplyMemSecToDataDecl("%<singleName> rtMinusInfF;", "MemSecDataParameters", "rtMinusInfF")>
    %<SLibApplyMemSecToDataDecl("%<singleName> rtNaNF;",      "MemSecDataParameters", "rtNaNF")>

    %<SLibGetFcnMemSecPragmaOnDecl("rt_InitInfAndNaN", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>void rt_InitInfAndNaN(size_t realSize);
    %<SLibGetFcnMemSecPragmaOnDecl("rt_InitInfAndNaN", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsInf", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<booleanName> rtIsInf(%<doubleName> value);
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsInf", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsInfF", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<booleanName> rtIsInfF(%<singleName> value);
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsInfF", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsNaN", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<booleanName> rtIsNaN(%<doubleName> value);
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsNaN", msFcn, "Post")>\
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsNaNF", msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>%<booleanName> rtIsNaNF(%<singleName> value);
    %<SLibGetFcnMemSecPragmaOnDecl("rtIsNaNF", msFcn, "Post")>\

    %<SLibGetStructDefHeader("", "BigEndianIEEEDouble", "")>
    struct {
        %<uint32Name> wordH;
        %<uint32Name> wordL;
    } words;
    %<SLibGetStructDefTail("BigEndianIEEEDouble", "")>

    %<SLibGetStructDefHeader("", "LittleEndianIEEEDouble", "")>
    struct {
        %<uint32Name> wordL;
        %<uint32Name> wordH;
    } words;
    %<SLibGetStructDefTail("LittleEndianIEEEDouble", "")>

    %<SLibGetStructDefHeader("", "IEEESingle", "")>
    union {
        %<singleName> wordLreal;
        %<uint32Name> wordLuint;
    } wordL;
    %<SLibGetStructDefTail("IEEESingle", "")>

    %<FcnGenCloseExternCForCPP()>
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_infnan_decl", fileH, buf)>

    %% Create source file contents
    %<LibPushEmptyStackSharedUtils()>
    %assign rtGetNaNDblInfo = SLibGenOneInputOneOutputFcnCallInfo("getNaN",tSS_VOID,tSS_DOUBLE,"")
    %assign rtGetNaNSglInfo = SLibGenOneInputOneOutputFcnCallInfo("getNaN",tSS_VOID,tSS_SINGLE,"")
    %assign rtGetInfDblInfo = SLibGenOneInputOneOutputFcnCallInfo("getInf",tSS_VOID,tSS_DOUBLE,"")
    %assign rtGetInfSglInfo = SLibGenOneInputOneOutputFcnCallInfo("getInf",tSS_VOID,tSS_SINGLE,"")
    %assign rtGetMinusInfDblInfo = SLibGenOneInputOneOutputFcnCallInfo("getMinusInf",tSS_VOID,tSS_DOUBLE,"")
    %assign rtGetMinusInfSglInfo = SLibGenOneInputOneOutputFcnCallInfo("getMinusInf",tSS_VOID,tSS_SINGLE,"")
    %assign nonfiniteIncludes = FcnDumpSharedUtilsIncludes("%<fctInfo.FileName>.%<LangFileExt>")

    %assign derivStackBuf = LibPopStackSharedUtilsIncludes()

    %openfile buf
    /*
    * %<fctInfo.FileName>.%<LangFileExt>
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_banner", fileC, buf)>
    %openfile buf
    /*
    * Abstract:
    *      Function to initialize non-finites,
    *      (Inf, NaN and -Inf).
    */
    %if ((GenUtilsSrcInSharedLocation == 1) || !SLibIsCompactFileFormat())
        #include "rt_nonfinite.h"
    %endif

    %<nonfiniteIncludes>

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_incl", fileC, buf)>

    %openfile buf
    #define NumBitsPerChar  %<::CompiledModel.ConfigSet.ProdBitPerChar>U
    %closefile buf
    %<SLibCacheMacroToUtilityFile("NumBitsPerChar", buf, "util_src_defines", fileC)>

    %assign scalarTokens = LibGetScalarDataInitTokens()

    %openfile buf

    %if GenCPP
        extern "C" {
    %endif

    %<SLibApplyMemSecToDataDefn("%<doubleName> rtInf;",         "MemSecDataParameters", "rtInf")>
    %<SLibApplyMemSecToDataDefn("%<doubleName> rtMinusInf;",    "MemSecDataParameters", "rtMinusInf")>
    %<SLibApplyMemSecToDataDefn("%<doubleName> rtNaN;",         "MemSecDataParameters", "rtNaN")>
    %<SLibApplyMemSecToDataDefn("%<singleName> rtInfF;",      "MemSecDataParameters", "rtInfF")>
    %<SLibApplyMemSecToDataDefn("%<singleName> rtMinusInfF;", "MemSecDataParameters", "rtMinusInfF")>
    %<SLibApplyMemSecToDataDefn("%<singleName> rtNaNF;",      "MemSecDataParameters", "rtNaNF")>

    %if GenCPP
    }
    %endif
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_decl", fileC, buf)>

    %openfile buf
    %if GenCPP
        extern "C" {
    %endif
    %assign fcnName = "rt_InitInfAndNaN"
    %assign fcnReturns = "void"
    %assign fcnParams = "size_t realSize"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %openfile fcnAbstract
%%}
Initialize the rtInf, rtMinusInf, and rtNaN needed by the
generated code. NaN is initialized as non-signaling. Assumes IEEE.
%%{
    %closefile fcnAbstract

    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
        Abstract fcnAbstract; Category "utility"; GeneratedBy "genrtnonfinite.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {

        (void) (realSize);
        rtNaN = %<rtGetNaNDblInfo.Expr>;
        rtNaNF = %<rtGetNaNSglInfo.Expr>;
        rtInf = %<rtGetInfDblInfo.Expr>;
        rtInfF = %<rtGetInfSglInfo.Expr>;
        rtMinusInf = %<rtGetMinusInfDblInfo.Expr>;
        rtMinusInfF = %<rtGetMinusInfSglInfo.Expr>;
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtIsInf"
    %assign fcnReturns = booleanName
    %assign fcnParams = "%<doubleName> value"
    %assign fcnAbstract = "Test if value is infinite"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
        Abstract fcnAbstract; Category "utility"; GeneratedBy "genrtnonfinite.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        return (%<booleanName>)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtIsInfF"
    %assign fcnReturns = booleanName
    %assign fcnParams = "%<singleName> value"
    %assign fcnAbstract = "Test if single-precision value is infinite"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
        Abstract fcnAbstract; Category "utility"; GeneratedBy "genrtnonfinite.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        return (%<booleanName>)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtIsNaN"
    %assign fcnReturns = booleanName
    %assign fcnParams = "%<doubleName> value"
    %assign fcnAbstract = "Test if value is not a number"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
        Abstract fcnAbstract; Category "utility"; GeneratedBy "genrtnonfinite.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        %<booleanName> result%<scalarTokens[0]>(%<booleanName>) 0%<scalarTokens[1]>;
        size_t bitsPerReal%<scalarTokens[0]>sizeof(%<doubleName>) * (NumBitsPerChar)%<scalarTokens[1]>;

        if (bitsPerReal == 32U) {
            result = rtIsNaNF((%<singleName>)value);
        } else {
            %assign codeForLittleEndian = CodeForBinary64NaNCheck("LittleEndianIEEEDouble")
            %assign codeForBigEndian = CodeForBinary64NaNCheck("BigEndianIEEEDouble")
            %<CodeForSwitchOnEndianness(codeForLittleEndian, codeForBigEndian)>
        }
        return result;
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %assign fcnName = "rtIsNaNF"
    %assign fcnReturns = booleanName
    %assign fcnParams = "%<singleName> value"
    %assign fcnAbstract = "Test if single-precision value is not a number"
    %assign functionSpecifier = LibStaticInFcnDecls()
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
        Abstract fcnAbstract; Category "utility"; GeneratedBy "genrtnonfinite.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>) {
        IEEESingle tmp;
        tmp.wordL.wordLreal = value;
        return (%<booleanName>)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
        (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
    }
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\
    %if GenCPP
    }
    %endif

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_fcn_defn", fileC, buf)>

    %assign headerFile = SLibGetFullFileNameForUtilCode("util_hdr_infnan_decl", fileH)
    %assign sourceFile = SLibGetFullFileNameForUtilCode("util_src_fcn_defn", fileC)

    %assign declDeps = [ "size_t" ]
    %assign defnDeps = []
    %<SLibAddEntryToFunctionTable("rt_InitInfAndNaN", headerFile, sourceFile, declDeps, defnDeps)>

    %assign declDeps = [ "" ]
    %<SLibAddEntryToFunctionTable("rtIsInf", headerFile, sourceFile, declDeps, defnDeps)>
    %<SLibAddEntryToFunctionTable("rtIsInfF", headerFile, sourceFile, declDeps, defnDeps)>
    %<SLibAddEntryToFunctionTable("rtIsNaNF", headerFile, sourceFile, declDeps, defnDeps)>

    %assign defnDeps = [ "size_t" ]
    %<SLibAddEntryToFunctionTable("rtIsNaN", headerFile, sourceFile, declDeps, defnDeps)>

    %<SLibUpdateGlobalSymbolTableForFile(headerFile, "BigEndianIEEEDouble")>
    %<SLibUpdateGlobalSymbolTableForFile(headerFile, "LittleEndianIEEEDouble")>
    %<SLibUpdateGlobalSymbolTableForFile(headerFile, "IEEESingle")>

    %if GenCPP
        %if ((GenUtilsSrcInSharedLocation == 1) || !SLibIsCompactFileFormat())
            %<SLibUpdateCLinkageHeader(headerFile)>
        %endif
    %endif

    %% Basic type headers for fixed width integer and floating point types (will
    %% resolve to e.g. rtwtypes.h, stdint.h or cstdint depdending on language
    %% standard types setting).
    %assign headerScopeTrue = TLC_TRUE
    %<SLibUpdateSymbolForFunction("rtIsInf", SLibVarGroupBasicTypeBool(), headerScopeTrue)>
    %<SLibUpdateSymbolForFunction("rtIsInf", SLibVarGroupBasicTypesFixedWidthInt(), headerScopeTrue)>
    %<SLibUpdateSymbolForFunction("rtIsInf", SLibVarGroupBasicTypesOther(), headerScopeTrue)>

%endfunction
