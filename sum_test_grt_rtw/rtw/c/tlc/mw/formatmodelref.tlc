%% ============================================================================
%%
%%
%%
%% Copyright 2003-2023 The MathWorks, Inc.
%%
%% Function: HandleModelrefConstBIOAndPrm ==========================================================
%% Dump const block IO and parameters for model reference
%%
%function ModelrefHandleConstBIOAndPrm()  void
    %% --------------------------------------------------------------------------
    %% SimulinkGlobal parameters:
    %% - Declaration done by standard data buffering mechanism (must be unstructured)
    %% - Instantiation done as part of model reference SFcn / top model.
    %assert( SLibAreSimulinkGlobalParamsUnstructured() || IsModelReferenceInlineOffTarget())

    %assign baseSystem = ::CompiledModel.System[GetBaseSystemIdx()]

    %% We should not generate the static rtP structure if we are
    %% generating Encapsulated C++ code, because the model class
    %% already has the rtP structure as its member.
    %if IsModelReferenceTarget()

        %if !SLibPrmBufferIsEmpty("SimulinkGlobal", "Instance")
            %openfile dataBuf
            %assign paramsType = SLibGetModelTypesNamespacePrefix() + ::tParametersType
            %if !GenerateClassInterface
                %assign paramsStaticName = ...
                    FcnSysVarGroupNonreusedName(baseSystem,"Parameter")
            %else
                %assign oldStrNames = SLibGetOldStrNames()
                %assign paramsStaticName = ...
                    SLibGetPrmsName(oldStrNames)
            %endif
            %assign classNamePrefix = ""
            %if GenerateClassInterface
                %if !ISEMPTY(::NamespaceName)
                    %assign classNamePrefix = ::NamespaceName + "::" + ::CPPClassName + "::"
                %else
                    %assign classNamePrefix = ::CPPClassName + "::"
                %endif
            %endif
            %assign equalSign = LibGetDataInitEqualSign()
            %<paramsType> %<classNamePrefix>%<paramsStaticName>%<equalSign>{
                %<SLibGetPrmBuffer("SimulinkGlobal", "Instance")>
            };\
            %closefile dataBuf
            %<SLibCacheCodeToModelFile("mdl_data_defn", SLibGetVarGroupInstDefinitionFile("Parameter"),dataBuf)>

            %assign prmExternDecl = "extern " + paramsType + " " + paramsStaticName + ";\n"
            %if SLibIsModelTypesModelClassNamespace()
                %<SLibCacheCPPEncapModelData("ExternData", prmExternDecl)>
            %else
                %if !IsRemoveHideChildFeatureOn()
                    %assign prmExternDecl = GetHideChildDefineSymbol("ifndef") + ...
                        prmExternDecl + GetHideChildDefineSymbol("endif")
                %endif
                %<SLibCacheCodeToModelFile("mdl_priv_extern_data_decl", SLibGetVarGroupInstDeclarationFile("Parameter"), prmExternDecl)>
            %endif
        %endif
    %endif
    %% --------------------------------------------------------------------------
    %% Const parameters:
    %%   structure definition: goes to private file
    %%   instantiation:        goes to data file
    %%   extern declaration:   goes to private file
    %%   init (if applicable): goes to mdl_init function (in model.c)

    %% Structure definitions (typedefs)
    %openfile constPrmDef
    %if !SLibPrmBufferIsEmpty("Const", "Typedef")

        /* Constant parameters (%<::AutoOrDefaultStorageClass> storage) */
        %<SLibGetPrmBuffer("Const", "Typedef")>\
    %endif
    %%
    %if !SLibPrmBufferIsEmpty("ConstWithInit", "Typedef")

        /* Constant parameters with dynamic initialization (%<::AutoOrDefaultStorageClass> storage) */
        %<SLibGetPrmBuffer("ConstWithInit", "Typedef")>\
    %endif
    %closefile constPrmDef
    %if !WHITE_SPACE(constPrmDef)
        %if SLibIsModelTypesModelClassNamespace()
            %<SLibCacheCPPEncapModelData("Typedefs", constPrmDef)>
        %else
            %<SLibCacheCodeToFile("mdl_priv_constParam_typedef", constPrmDef)>
        %endif
    %endif

    %% Instantiation
    %openfile constPrmInst
    %if !SLibPrmBufferIsEmpty("Const", "Instance")
        %openfile constPrmBuff
        /* Constant parameters (%<::AutoOrDefaultStorageClass> storage) */
        %<SLibGetPrmBuffer("Const", "Instance")>
        %closefile constPrmBuff
        %<SLibCacheCodeToModelFile("mdl_constParam_with_initialization", SLibGetVarGroupInstDefinitionFile("ConstParameter"), constPrmBuff)>
        %undef constPrmBuff
    %endif
    %%
    %if !SLibPrmBufferIsEmpty("ConstWithInit", "Instance")
        %openfile constWithInitBuff

        /* Constant parameters with dynamic initialization (%<::AutoOrDefaultStorageClass> storage) */
        %<SLibGetPrmBuffer("ConstWithInit", "Instance")>
        %closefile constWithInitBuff
        %<SLibCacheCodeToModelFile("mdl_constParam_with_initialization", SLibGetVarGroupInstDefinitionFile("ConstParameterWithInit"), constWithInitBuff)>
        %undef constWithInitBuff
    %endif
    %closefile constPrmInst
    %if !WHITE_SPACE(constPrmInst)
        %<SLibCacheCodeToFile("mdl_constParam_with_initialization", constPrmInst)>
    %endif

    %% Extern declarations
    %assign constPrmDecl = GetConstPrmExternBuf()
    %assign constPrmDecl = constPrmDecl + GetConstPrmWithInitExternBuf()
    %if !WHITE_SPACE(constPrmDecl)
        %if SLibIsModelTypesModelClassNamespace()
            %<SLibCacheCPPEncapModelData("ExternData", constPrmDecl)>
        %else
            %assign needsHideChild = !IsRemoveHideChildFeatureOn()
            %if needsHideChild && SLibIsCompactFileFormat()
                %assign constPrmDecl = GetHideChildDefineSymbol("ifndef") + "\n" + ...
                    constPrmDecl + "\n" + GetHideChildDefineSymbol("endif")
            %endif
            %% 'mdl_priv_constParam_decl' directs to private file in modular mode and
            %% header file in compact mode.
            %% It behaves the same no matter RemoveMdlrefHideChild is on or not.
            %<SLibCacheCodeToFile("mdl_priv_constParam_decl", constPrmDecl)>
        %endif
    %endif

    %% --------------------------------------------------------------------------
    %% Const Block I/O
    %%    structure definition:  goes to system header files (handled in
    %%                           other places).
    %%                           ModelrefCleanup: This structure
    %%                           should go to private file
    %%    Instance:              goes to data file
    %%    Extern declration:     goes to private file
    %%                           model reference s-function wrapper
    %%

    %% Instance
    %openfile cioBuf
    %if !LibConstBlockIOInstanceIsEmpty()
        %openfile cioDefBuf
        /* Invariant block signals (%<::AutoOrDefaultStorageClass> storage) */
        %assign qualifiers = SLibGetConstBlockIOQualifiers()
        %assign typePrefix = SLibGetModelTypesNamespacePrefix()
        %assign equalSign = LibGetDataInitEqualSign()
        %<qualifiers> %<typePrefix>%<FcnSysVarGroupType(baseSystem,"ConstBlockIO")> %<::tConstBlockIOStruct>%<equalSign>{
            %<LibDumpConstBlockIOInstance()>
        };
        %closefile cioDefBuf
        %<SLibAddPreStructDeclarePragma(::tConstBlockIOStruct)>\
        %<SLibApplyMemSecToDataDefn(cioDefBuf, ...
            "MemSecDataConstants", "%<::tConstBlockIOStruct>")>\
        %<SLibAddPostStructDeclarePragma(::tConstBlockIOStruct)>\
    %endif
    %closefile cioBuf

    %% dump info in data file
    %if !WHITE_SPACE(cioBuf)
        %<SLibCacheCodeToModelFile("data_constBIO_decl", SLibGetVarGroupInstDefinitionFile("ConstBlockIO"), cioBuf)>
    %endif

    %% Extern declration
    %assign cBIOExtBuf = GetConstBIOExternBuf()
    %if !WHITE_SPACE(cBIOExtBuf)
        %if SLibIsModelTypesModelClassNamespace()
            %<SLibCacheCPPEncapModelData("ExternData", cBIOExtBuf)>
        %else
            %assign needsHideChild = !IsRemoveHideChildFeatureOn()
            %if SLibIsCompactFileFormat() && needsHideChild
                %assign cBIOExtBuf = GetHideChildDefineSymbol("ifndef") + "\n" + ...
                    cBIOExtBuf + "\n" + GetHideChildDefineSymbol("endif")
            %endif
            %% 'mdl_priv_extern_data_decl' directs to private file in modular mode and
            %% header file in compact mode.
            %% It behaves the same no matter RemoveMdlrefHideChild is on or not.
            %<SLibCacheCodeToModelFile("mdl_priv_extern_data_decl", SLibGetVarGroupInstDeclarationFile("ConstBlockIO"), cBIOExtBuf)>
        %endif
    %endif

    %% Structure data type zero representations
    %assign ::CurrentBufferFileName = SLibGetFullFileNameForCode("data_ground_defn")
    %assign defGndBuf = LibDumpGroundDeclarations(0)
    %assign ::CurrentBufferFileName = ""
    %<SLibCacheCodeToFile("data_ground_defn", defGndBuf)>

%endfunction %% ModelrefHandleConstBIOAndPrm


%% Function: ModelrefHandleRTModel =================================================================
%%  For model reference rtModel typedef goes to top model header file,
%%  and rtModel macros goes to private file.
%%  This may need to be updated when we support continuous states
%%
%function ModelrefHandleRTModel()  void

    %assert(IsModelReferenceTarget() && GenRTModel)

    %% --------------------------------------------------------------------------
    %% rtModel typedef
    %assign needsHideChild = !IsRemoveHideChildFeatureOn()
    %assign isRtmHiddenFromParent = CGMODEL_ACCESS(...
        "CGModel.isRtmTypeHiddenFromParent")
    %openfile rtmTypedefs
    %assign rtmTypedefsStr = RTMGenRtMdlTypedef()
    %if !WHITE_SPACE(rtmTypedefsStr)
        %if isRtmHiddenFromParent && needsHideChild
            %<GetHideChildDefineSymbol("ifndef")>
        %endif
        %<rtmTypedefsStr>
        %if isRtmHiddenFromParent && needsHideChild
            %<GetHideChildDefineSymbol("endif")>
        %endif
    %endif
    %closefile rtmTypedefs
    %if SLibIsModelTypesModelClassNamespace()
        %<SLibCacheCPPEncapModelData("Typedefs", rtmTypedefs)>
    %elseif isRtmHiddenFromParent && IsRemoveHideChildFeatureOn() && ...
        CGMODEL_ACCESS("CGModel.generateNonEmptyHideChildSymbol")
        %% todo: MODELREF-4590
        %% This struct might be used by capi.c file
        %% So for compact mode, write this typedef into hdr file.
        %<SLibCacheCodeToFile("mdl_priv_constParam_typedef", rtmTypedefs)>
    %else
        %<SLibCacheCodeToFile("data_rtmodel_typedef", rtmTypedefs)>
    %endif
    %undef rtmTypedefs

    %% --------------------------------------------------------------------------
    %% rtModel macros
    %openfile rtmMacros

    %assign rtmMacrosStr = RTMGenMacroDefines("PUBLIC")
    %if !WHITE_SPACE(rtmMacrosStr)
        /* Macros for accessing real-time model data structure */
        %<rtmMacrosStr>
    %endif
    %closefile rtmMacros
    %<SLibCacheCodeToFile("mdl_priv_rtm_macro_define", rtmMacros)>
    %undef rtmMacros


    %% Opaque type def goes to type file
    %if !EmptyRealTimeObject
        %openfile opaqTypedefBuf
        %<RTMsGenOpaqueTypedef(::CompiledModel.System[NumSystems-1])>\
        %closefile opaqTypedefBuf
        %<SLibCacheCodeToFile("mdl_data_typedef", opaqTypedefBuf)>
    %endif

%endfunction %% ModelrefHandleRTModel


%% Function: ModelrefDumpDataFileBannerAndInclude ==================================================
%% Added code to dump banner and include to data file.
%function ModelrefDumpDataFileBannerAndInclude() void
    %openfile dataBanBuf
    /*
    * %<Name>_data.%<LangFileExt>
    *
    %<SLibCommonHeaderInfo()>\
    */
    %closefile dataBanBuf


    %openfile inclBuf
    %assign fileName = SLibGetSystemOutputHdrFileBaseName(System[NumSystems-2])
    #include "%<fileName>.h"
    %<SLibIncludePrivateHeader()>
    %closefile inclBuf

    %<SLibCacheCodeToFile("mdldata_src_ban", dataBanBuf)>
    %<SLibCacheCodeToFile("mdldata_src_incl", inclBuf)>

%endfunction


%% Function: ModelrefGenSfcnAndHandleConstPrmAndBIO ================================================
%%   Temporary function to dump model reference constant parameter, etc
%%
%function ModelrefGenSfcnAndHandleConstPrmAndBIO() void
    %% Only generate s-function wrapper for the model reference SIM target
    %if IsModelReferenceSimTarget()
        %include "modelrefsfcnbody.tlc"
    %endif

    %<ModelrefHandleConstBIOAndPrm()>

    %assign dataFile = SLibGetFileRecForCode("mdldata_src")
    %if !ISEMPTY(dataFile) && !SLibGetModelFileIsEmpty(dataFile)
        %<ModelrefDumpDataFileBannerAndInclude()>
        %if ERTCustomFileBanners
            %<LibSetSourceFileCodeTemplate(dataFile,ERTDataSrcFileTemplate)>
        %endif
    %endif
%endfunction


%% Function:  =======================================
%%   Temporary function to dump model reference constant parameter, etc
%%
%function ModelrefHandleExportFileInfo() void

    %openfile mdlRefRegFcn
    %if !SLibGetEmptyModelRefInitializeFcn()
        /* Model reference registration function */
        %if CGMODEL_ACCESS("CGModel.isIndividualFunctionMappingEnabled")
            %<SLibGetFcnMemSecPragmaForFunction(GetModelRefRegistrationFcnName(), "Initialize", "", "Pre")>\
        %else
            %<SLibGetFcnMemSecPragmaOnDecl(GetModelRefRegistrationFcnName(), "MemSecFuncInitTerm", "Pre")>\
        %endif

        %assign fcnArgs = SLibModelReferenceRegFcnArgs()

        %<LibExternInFcnDecls()>void %<GetModelRefRegistrationFcnName()>(%<fcnArgs>);

        %if CGMODEL_ACCESS("CGModel.isIndividualFunctionMappingEnabled")
            %<SLibGetFcnMemSecPragmaForFunction(GetModelRefRegistrationFcnName(), "Initialize", "", "Post")>\
        %else
            %<SLibGetFcnMemSecPragmaOnDecl(GetModelRefRegistrationFcnName(), "MemSecFuncInitTerm", "Post")>\
        %endif
    %endif
    %closefile mdlRefRegFcn

    %openfile groundExterns
    %<LibDumpGroundExterns()>\
    %closefile groundExterns

    %if !GenerateClassInterface && !ISEMPTY(mdlRefRegFcn)
        %<SLibPrintMRInitializeFcnDeclToHeaderFile(mdlRefRegFcn, fcnArgs)>\
    %endif

    %<SLibCacheCodeToFile("baseMdl_data_decl", groundExterns)>

    %<ModelrefHandleRTModel()>
%endfunction

%function SLibPrintMRInitializeFcnDeclToHeaderFile(mdlRefRegFcn, fcnArgs) void
    %assign initializeFcnName = GetModelRefRegistrationFcnName()
    %assign headerFile = ""
    %assign sourceFile = ""
    %assign declDeps = []
    %assign defnDeps = []
    %if SLibGetEnableFileControlForEntryPointFcns()
        %assign headerFile = GetEntryPointFcnMappedFile("InitFcn", "Header", 0)
        %assign sourceFile = GetEntryPointFcnMappedFile("InitFcn", "Source", 0)

        %if headerFile == SLibGetFileNameForCode("baseMdl_reg_fcn_prototype") + ".h"
            %<SLibCacheMRInitializeCodeToSystemFile(mdlRefRegFcn)>\
            %return
        %endif

        %<SLibSetHeaderFileDeclarationsAttribute(headerFile, mdlRefRegFcn)>\
        %<SLibUpdateGlobalSymbolTableForFile(headerFile, initializeFcnName)>
        %if SLibFcnBufferContainsRTM(mdlRefRegFcn)
            %<SLibUpdateLocalSymbolTableForFile(headerFile, SLibGetFcnDeclarationRTMSymbolName())>
        %endif

        %% Definition of initialize function uses basic type char, which belongs to the "other" group
        %assign headerScopeTrue = TLC_TRUE
        %<SLibUpdateSymbolForFunction(initializeFcnName, SLibVarGroupBasicTypesOther(), headerScopeTrue)>

        %% If initialize function declaration contains input arguments (such as ZCE_*), include model header file
        %if (fcnArgs != "void")
            %<SLibUpdateHeadersNeededByFile(headerFile, LibGetModelFileFullName("ModelHeaderFile"))>\
        %endif

        %<SLibAddEntryToFunctionTable(initializeFcnName, headerFile, sourceFile, declDeps, defnDeps)>
    %else
        %<SLibCacheMRInitializeCodeToSystemFile(mdlRefRegFcn)>\
    %endif
%endfunction

%function SLibCacheMRInitializeCodeToSystemFile(mdlRefRegFcn) void
    %assign initializeFcnName = GetModelRefRegistrationFcnName()
    %assign headerFile = ""
    %assign sourceFile = ""
    %assign declDeps = []
    %assign defnDeps = []

    %<SLibCacheCodeToFile("baseMdl_reg_fcn_prototype", mdlRefRegFcn)>
    %if SLibFcnBufferContainsRTM(mdlRefRegFcn)
        %assign headerFile = SLibGetFileNameForCode("baseMdl_reg_fcn_prototype") + ".h"
        %<SLibUpdateLocalSymbolTableForFile(headerFile, SLibGetFcnDeclarationRTMSymbolName())>
    %endif

    %<SLibAddEntryToFunctionTable(initializeFcnName, headerFile, sourceFile, declDeps, defnDeps)>
%endfunction

%% [EOF] formatmodelref.tlc
