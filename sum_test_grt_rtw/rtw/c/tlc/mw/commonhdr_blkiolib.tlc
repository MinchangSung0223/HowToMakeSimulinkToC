%%
%%
%%
%%
%% Copyright 1994-2023 The MathWorks, Inc.
%%
%% Abstract:
%%   This system TLC library file contains functions that are common
%%   between the different code generators for producing the the model's
%%   block IO structure definition.

%if EXISTS(_COMMONHDR_BLKIOLIB_) == 0
%assign _COMMONHDR_BLKIOLIB_ = 1


%% ============================================================================
%% Create global cache variables to hold each structure definition
%% ============================================================================

%<LibAddToCompiledModel("BlockIOStructDefn", 0)>
%<LibAddToCompiledModel("ConstBlockIOStructDefn", 0)>

%% TopTester: test/toolbox/simulink/variants/var-inline-general/tIVfcnCall_neg.m
%%
%function FcnGenBlockIODefNotHandledInVarGroup(bo)
    %openfile retBuf
    %assign blkName = SLibGrBlockName(bo.GrSrc)
    %assign boId = LibGetRecordIdentifier(bo)
    %if bo.DeclareAsPointer == "yes" || bo.Autosar4p0ImplicitRead == "yes"
        %with bo
            %assign comment  = "/* " + SLibGrBlockCommentName(GrSrc) + " */"
            %assign dataType = SLibGetRecordDataTypeName(bo, "")
            %assign width = LibGetRecordWidth(bo)
            %assign optWidth = LibOptionalVectorWidth(width)

            %assert SLibAutosarActive()
            %assign constPrefix = SLibAutosarGetPtrConstPrefix()
            %if width > 1
                %if bo.Autosar4p0ImplicitRead == "yes"
                    %<constPrefix> %<dataType> *%<boId>; %<comment>
                %else
                    %<constPrefix> %<dataType> (*%<boId>)%<optWidth>; %<comment>
                %endif
            %else
                %<constPrefix> %<dataType> *%<boId>; %<comment>
            %endif
        %endwith
    %else
        %if bo.BitFieldWidth > 0
            %with bo
                %assign bitfldtype = SLibGetTypeForBitfield(BitFieldWidth)
                %assign comment  = "/* '" + SLibGrBlockName(GrSrc) + "' */"
                %<bitfldtype> %<boId>:%<BitFieldWidth>; %<comment>
            %endwith
        %endif
    %endif
    %closefile retBuf

    %if !ISEMPTY(retBuf)
        %assign traceMarker = SLibAddBlockTrace(blkName)
        %assign retBuf = "%<SLibTraceBegin(traceMarker)>%<retBuf>%<SLibTraceEnd(traceMarker)>"
    %endif
    %return retBuf
%endfunction

%% Function: LibCacheSystemBlkIOStructDef ==========================================================
%% Abstract:
%%   Cache the definition of the system BlockIO structure.
%% TopTester: test/toolbox/simulink/variants/var-vss-codevariants/tcodevariants9.m
%%
%function LibCacheSystemBlkIOStructDef(sysIdx) void
    %if !SLibSystemHasOwnDataScope(System[sysIdx])
        %return
    %endif
    %assign blockioBuff = SLibGetSystemDataDefUsingVarGroup(sysIdx,"BlockIO")
    %assign unifiedDefs = FcnUnifySystemDataDef(blockioBuff.Members)
    %assign blockIoDef = ""
    %assign identifierTag = ""
    %if (sysIdx < (NumSystems-1))
        %if !GenerateClassInterface || !IsModelReferenceBaseSys(System[sysIdx])
            %assign identifier = FcnSysVarGroupType(System[sysIdx],"BlockIO")
        %else
            %assign identifier = ::tBlockIOType
        %endif
        %assign sysInfo = GetSystemNameForComments(System[sysIdx])
        %openfile comment
        /* Block signals for %<sysInfo> */
        %closefile comment
    %else
        %assign ::CompiledModel.BlockIOStructDefn = ...
            WHITE_SPACE(unifiedDefs)?"":"NonEmpty"
        %assign identifier = ::tBlockIOType
        %if SLibAutosarActive()
            %assign identifierTag = ::CompiledModel.GlobalScope.tBlockIOTypeTag
        %endif
        %openfile comment
        /* Block signals (%<::AutoOrDefaultStorageClass> storage) */
        %closefile comment
    %endif
    %%
    %assign userTypes = LibDumpTypedefsCache()

    %% If the user defines some types in a SFcn, ensure that they go to
    %% model_types.h instead of model.h. Since the file model_types.h is
    %% included by the subsystem header file, the type will be available to
    %% the subsystem just in case it needs it. Ref geck: g1833321
    %if userTypes!=""
        %openfile userTypedef
        %<userTypes>
        %closefile userTypedef

        %assign theSystem = System[sysIdx]
        %assign isRoot = (theSystem.Type == "root")

        %assign headerFile = ""
        %if isRoot
            %<SLibCacheCodeToFile("mdl_data_typedef", userTypedef)>
            %assign headerFile = SLibGetFullFileNameForCode("mdl_data_typedef")
        %else
            %<SLibCacheSystemCodeToFile("sys_data_BIO_typedef", theSystem, userTypedef)>
            %assign headerFile = SLibGetFullFileNameForSystemCode("sys_data_BIO_typedef", sysIdx)
        %endif
        %% We don't know what type user defines, just include rtwtypes.h (and model_types.h) for now
        %<SLibUpdateLocalSymbolTableForFile(headerFile, SLibVarGroupBasicTypesAll())>
        %if !isRoot && SLibGenModelTypesFile()
            %<SLibUpdateHeadersNeededByFile(headerFile, SLibGetFileNameForCode("mdl_types_hdr") + ".h")>
        %endif
        %% Include in child system header files
        %if theSystem.FileNameOwnerIdx == sysIdx
            %foreach idx = SIZE(theSystem.IncludedChildSystemIdx, 1)
                %assign inChildSysIdx = theSystem.IncludedChildSystemIdx[idx]
                %<SLibUpdateHeadersNeededByFile(...
                    SLibGetFullFileNameForSystemCode("sys_hdr_incl", inChildSysIdx), headerFile)>
            %endforeach
        %endif
    %endif

    %% Reset the cache after the types are dumped
    %<LibResetCustomCodeCache(::CustomCodeCacheType.Typedef)>
    %if blockioBuff.NumMembers > 0
        %openfile blockIoDef
        %<comment>\
        %assign nonInlSysIdx = System[sysIdx].NonInlinedParentSystemIdx
        %assign isHiddenFromParent = CGMODEL_ACCESS("CGModel.isVarGroupTypeHiddenFromParent", ...
            "BlockIO", nonInlSysIdx)
        %assign needsHideChild =  isHiddenFromParent && !IsRemoveHideChildFeatureOn()
        %if needsHideChild
            %<GetHideChildDefineSymbol("ifndef")>\
        %endif
        %assign align = -1
        %if structDAFlag.supported && !fieldDAFlag.supported
            %assign align = blockioBuff.Alignment
        %endif
        %<SLibDumpStructDefWithAlignment(identifierTag, identifier, align, unifiedDefs)>
        %if needsHideChild
            %<GetHideChildDefineSymbol("endif")>\
        %endif
        %closefile blockIoDef

        %assign headerName = ""
        %if SLibIsSystemTypesModelClassNamespace(System[sysIdx])
            %<SLibCacheCPPEncapModelData("Typedefs", blockIoDef)>
        %elseif IsRemoveHideChildFeatureOn() && isHiddenFromParent && ...
            CGMODEL_ACCESS("CGModel.dumpSysCodeIntoModelFile", sysIdx)
            %% todo: MODELREF-4590
            %assign headerName = SLibGetFullFileNameForCode("mdl_priv_constParam_typedef")
            %<SLibCacheCodeToFile("mdl_priv_constParam_typedef", blockIoDef)>

            %% If BIO needs to include any header files, they were included in model header file by
            %% function SLibDumpCommonIncludes.
            %% Thus, we have to include model header file in private file.
            %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.BlockLocal)
            %if !ISEMPTY(headers)
                %assign modelHeader = SLibGetFullFileNameForCode("mdl_hdr")
                %<SLibUpdateHeadersNeededByFile(headerName, modelHeader)>
            %endif
        %else
            %assign headerName = SLibGetFullFileNameForSystemCode("sys_data_BIO_typedef",sysIdx)
            %<SLibCacheSystemCodeToFile("sys_data_BIO_typedef", System[sysIdx], blockIoDef)>
        %endif

        %if !ISEMPTY(headerName) && blockioBuff.VariantCondIncluded
            %<FcnIncludeVariantHeader(headerName)>
        %endif
    %endif
    %%
%endfunction

%% Function: LibCacheSystemConstBlkIOStructDef =====================================================
%% Abstract:
%%   Cache the definition of the system constant BlockIO structure.
%% TopTester: test/toolbox/simulink/variants/var-vss-sigobj/tVSSSigObj.m
%% TopTester: test/toolbox/simulink/variants/var-normal-matlabvariable-support/tNormalMatlabVariable2.m
%% TopTester: test/toolbox/simulink/variants/modelVariants/tVariantsBasic.m
%%
%function LibCacheSystemConstBlkIOStructDef(sysIdx) void
    %if !SLibSystemHasOwnDataScope(System[sysIdx])
        %return
    %endif
    %assign blockioBuff = SLibGetSystemDataDefUsingVarGroup(sysIdx, "ConstBlockIO")
    %assign unifiedDefs = FcnUnifySystemDataDef(blockioBuff.Members)
    %assign blockIoDef = ""
    %assign trailer = ""
    %assign identifierTag = ""

    %if (sysIdx < (NumSystems-1))
        %assign identifier = FcnSysVarGroupType(System[sysIdx],"ConstBlockIO")
        %assign varGrpIdx = FcnSysVarGroupIndex(System[sysIdx],"ConstBlockIO",0)
        %if varGrpIdx >= 0 && ::GenCPP
            %assign identifierTag = ::CompiledModel.VarGroups.VarGroup[varGrpIdx].VarGroupTypeTag
        %endif

        %assign sysInfo = GetSystemNameForComments(System[sysIdx])
        %openfile comment
        /* Invariant block signals for %<sysInfo> */
        %closefile comment
    %else
        %assign ::CompiledModel.ConstBlockIOStructDefn = ...
            WHITE_SPACE(unifiedDefs)?"":"Nonempty"
        %assign identifier = ::tConstBlockIOType
        %if ::GenCPP
            %assign identifierTag = ::CompiledModel.GlobalScope.tConstBlockIOTypeTag
        %endif
        %openfile comment
        /* Invariant block signals (%<::AutoOrDefaultStorageClass> storage) */
        %closefile comment
        %%
        %% The #define below is not done for RealTime because of name clash
        %if (CodeFormat != "RealTime" && !SLibIsERTCodeFormat())
            %openfile trailer
            /* For easy access from the SimStruct */
            %assign str = "(%<::tConstBlockIOType> *) " ...
                "%<RTMuGet("ConstBlockIO")>"
            #define %<::tConstBlockIOStruct> (%<str>)

            %undef str
            %closefile trailer
        %endif
    %endif

    %assign constQualifier = ((::GenCPP) ? "const " : "")
    %if blockioBuff.NumMembers > 0
        %openfile blockIoDef

        %<comment>\
        %assign nonInlSysIdx = System[sysIdx].NonInlinedParentSystemIdx
        %assign isHiddenFromParent = CGMODEL_ACCESS("CGModel.isVarGroupTypeHiddenFromParent", ...
            "ConstBlockIO", nonInlSysIdx)
        %assign needsHideChild =  isHiddenFromParent && !IsRemoveHideChildFeatureOn()
        %if needsHideChild
            %<GetHideChildDefineSymbol("ifndef")>\
        %endif
        %assign align = ""
        %if structDAFlag.supported && blockioBuff.Alignment > 0
            %assign align = SLibGetAlignmentSyntax(::CompiledModel.Name, identifier, "", ...
                blockioBuff.Alignment, "DATA_ALIGNMENT_WHOLE_STRUCT")
        %endif

        %assign useCStyleStructDef = !CGMODEL_ACCESS("CGModel.getUseCppStyleStructFlag")
        %if useCStyleStructDef    %% keep "const" if using "typedef"
            %if align != ""
                %if structDAFlag.position == "DATA_ALIGNMENT_PREDIRECTIVE"
                    typedef %<constQualifier>struct %<align> %<identifierTag> {
                %elseif structDAFlag.position == "DATA_ALIGNMENT_PRECEDING_STATEMENT"
                    %<align>
                    typedef %<constQualifier>struct %<identifierTag> {
                %else
                    typedef %<constQualifier>struct %<identifierTag> {
                %endif
            %else
                typedef %<constQualifier>struct %<identifierTag> {
            %endif
        %else
            %<SLibGetStructDefHeader(identifierTag, identifier, align)>
        %endif
        %<unifiedDefs>
        %<SLibGetStructDefTail(identifier, align)>
        %<trailer>\
        %if needsHideChild
            %<GetHideChildDefineSymbol("endif")>\
        %endif
        %closefile blockIoDef

        %%
        %if SLibIsSystemTypesModelClassNamespace(System[sysIdx])
            %<SLibCacheCPPEncapModelData("Typedefs", blockIoDef)>
        %elseif  IsRemoveHideChildFeatureOn() && isHiddenFromParent && ...
            CGMODEL_ACCESS("CGModel.dumpSysCodeIntoModelFile", sysIdx)
            %% todo: MODELREF-4590
            %%<SLibCacheCodeToFile("mdl_priv_data_typedef", blockIoDef)>

            %% For compact mode, mdl_priv_data_typedef write buffer into src file,
            %% this will not work if model has a data file(data file cannot compile).
            %% To make it work, we write it into mdl_priv_constParam_typedef,
            %% which will write buffer into hdr file instead.
            %<SLibCacheCodeToFile("mdl_priv_constParam_typedef", blockIoDef)>

            %% If BIO needs to include any header files, they were included in model header file by
            %% function SLibDumpCommonIncludes.
            %% Thus, we have to include model header file in private file.
            %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.BlockLocal)
            %if !ISEMPTY(headers)
                %assign privHeader = SLibGetFullFileNameForCode("mdl_priv_constParam_typedef")
                %assign modelHeader = SLibGetFullFileNameForCode("mdl_hdr")
                %<SLibUpdateHeadersNeededByFile(privHeader, modelHeader)>
            %endif
        %else
            %<SLibCacheSystemCodeToFile("sys_data_constBIO_typedef", System[sysIdx], blockIoDef)>
        %endif
    %endif
%endfunction


%% Function: LibBlockIOStructIsEmpty ===============================================================
%% Abstract:
%%   Does the root system have any blockIO?
%% TopTester: test/toolbox/simulink/variants/var-vss-sigobj/tVSSSigObj.m
%%
%function LibBlockIOStructIsEmpty() void
    %assign baseSysIdx = GetBaseSystemIdx()
    %assert (LibGetFieldSet(System[baseSysIdx], "HasBlockIOArg") == 1)
    %assert !((::CompiledModel.DWorkAndBlockIOCombined == 1) && ...
        (System[baseSysIdx].HasBlockIOArg == 1) && ...
        (SLibGetSDPPlatformType() == "UNKNOWN_PLATFORM"))
    %return (System[baseSysIdx].HasBlockIOArg == 0)
%endfunction

%% Function: SLibModelBlockIOStructIsEmpty =========================================================
%% Abstract:
%%   Does the model have any blockIO.
%%
%function SLibModelBlockIOStructIsEmpty() void
    %assert !((::CompiledModel.DWorkAndBlockIOCombined == 1) && ...
        (::CompiledModel.HasBlockIOArg == 1))
    %return (::CompiledModel.HasBlockIOArg == 0)
%endfunction


%% Function: LibConstBlockIOStructIsEmpty ==========================================================
%% Abstract:
%%   Does the root system have any constBlockIO?
%%
%function LibConstBlockIOStructIsEmpty() void
    %assign baseSysIdx = GetBaseSystemIdx()
    %assert (LibGetFieldSet(System[baseSysIdx], "HasConstBlockIOArg") == 1)
    %return (System[baseSysIdx].HasConstBlockIOArg == 0)
%endfunction

%% Function: SLibModelConstBlockIOStructIsEmpty ====================================================
%% Abstract:
%%   Does the model have any constBlockIO.
%%
%function SLibModelConstBlockIOStructIsEmpty() void
    %return (::CompiledModel.HasConstBlockIOArg == 0)
%endfunction

%% Function: SLibVerifyBlockOutputPorts ============================================================
%% Abstract:
%%   Verify that for each data output port in the global block outputs and the
%%   local block outputs points to the correct record in the system.
%% TopTester: test/toolbox/simulink/variants/var-vss-condexecuted/tContPortGecks.m
%%
%function SLibVerifyBlockOutputPorts() void
    %% Check the global block outputs.
    %foreach boIdx = ::CompiledModel.BlockOutputs.NumGlobalBlockOutputs
        %assign blkOut = ::CompiledModel.BlockOutputs.GlobalBlockOutput[boIdx]
        %if SLibOmitRecord(blkOut) || ISEMPTY(blkOut.SigSrc)
            %continue
        %endif
        %assign sysIdx  = blkOut.SigSrc[0]
        %assign blkIdx  = blkOut.SigSrc[2]
        %assign portIdx = blkOut.SigSrc[3]
        %assign block   = ::CompiledModel.System[sysIdx].Block[blkIdx]
        %%
        %% The opaque block always lives in the root system, so we won't be able
        %% to trace canonical outputs correctly. This code will be removed,
        %% once we depricate input and output port records of the opaque block.
        %% Those are only maintained to facilitate TLC code that is not part of
        %% the main code generation.
        %%
        %if block.Type == "Opaque"
            %continue
        %endif
        %assign port    = block.DataOutputPort[portIdx]
        %assign idNum   = IDNUM(port.SignalSrc[0])

        %if idNum[0] == "y" %% The block output can point to a canonical output of a
            %continue         %% reusable subsystem. In this case the signal can't be
        %endif              %% traced back directly.
        %assign boId1 = LibGetRecordIdentifier(blkOut)
        %assign reverseBlkOut = ::CompiledModel.BlockOutputs.GlobalBlockOutput[idNum[1]]
        %assign boId2 = LibGetRecordIdentifier(reverseBlkOut)

        %if boId1 != boId2
            %warning %<boId1> != %<boId2>
            %warning LogicalSource == %<reverseBlkOut.LogicalSrc>
            %return TLC_FALSE
        %endif
    %endforeach

    %return TLC_TRUE
%endfunction


%endif %%  _COMMONHDR_BLKIOLIB_
