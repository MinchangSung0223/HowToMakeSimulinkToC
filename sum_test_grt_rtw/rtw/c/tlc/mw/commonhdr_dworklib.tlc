%%
%%
%%
%%
%% Copyright 1994-2023 The MathWorks, Inc.
%%
%% Abstract:
%%   This system TLC library file contains functions that are common
%%   between the different code generators for producing the the model's
%%   dwork structure definition.

%if EXISTS(_COMMONHDR_DWORKLIB_) == 0
%assign _COMMONHDR_DWORKLIB_ = 1

%% ============================================================================
%% Create global cache variables to hold each structure definition
%% ============================================================================

%<LibAddToCompiledModel("DWorkStructDefn", 0)>

%% Function: FcnDefineDWorkElement =================================================================
%% Abstract:
%%   This function defines a element in the DWork structure.
%%
%function FcnDefineDWorkElement(id, dataType, width) void
    %openfile buffer
    %assign optWidth = LibOptionalVectorWidth(width)
    %<dataType>%<id>%<optWidth>;\
    %closefile buffer
    %return buffer
%endfunction

%% Function: FcnReportDWorkError ===================================================================
%% Abstact:
%%   Shared error message.
%%
%function FcnReportDWorkError(block, dwType, count, width) void
    %assign errTxt = "%<dwType> size mismatch detected.\n" + \
    "  Block requires    : %<width> elements\n" + \
    "  Actually generated: %<count> elements\n\n" + \
    "This can occur when an inlined s-function defines more/less work \n" + \
    "vector elements in TLC than it did in the C-MEX version of the block.\n"
    %<LibBlockReportError(block,errTxt)>
%endfunction

%% Function: FcnDefineDWorkRecord ==================================================================
%% Abstract:
%%   Returns a DWork substructure or element for a block depending on the number
%%   of declared work vector elements.
%%
%function FcnDefineDWorkRecord(dwRec, dwType, dataType) Output
    %assign referencedBy = SLibReferencedBy(dwRec)
    %assign traceMarker = SLibAddBlockTrace(referencedBy)
    %<SLibTraceBegin(traceMarker)>
    %if dwRec.SigSrc[0] < 0 || dwRec.SigSrc[2] < 0
        %createrecord block { Type "InputPort" ; Num%<dwType>Defines 0 }
    %else
        %assign block = System[dwRec.SigSrc[0]].Block[dwRec.SigSrc[2]]
    %endif
    %assign dwId  = LibGetRecordIdentifier(dwRec)
    %if GETFIELD(block, "Num%<dwType>Defines") > 0
        %assign count = 0
        struct {
            %foreach i = GETFIELD(block, "Num%<dwType>Defines")
                %assign def = GETFIELD(block, "%<dwType>Define")
                %<FcnDefineDWorkElement(def[i].Name, dataType, def[i].Width)>
                %assign count = count + def[i].Width
            %endforeach
        } %<dwId>; /* %<SLibReferencedBy(dwRec)> */
        %%
        %if count != SLibDWorkWidth(dwRec)
            %<FcnReportDWorkError(block, dwType, count, SLibDWorkWidth(dwRec))>
        %endif
    %else
        %<FcnDefineDWorkElement(dwId, dataType, SLibDWorkWidth(dwRec))>\
        /* %<referencedBy> */
    %endif
    %<SLibTraceEnd(traceMarker)>
%endfunction

%% Function: FcnIsDWorkFromMdlBlockInCppClassGenMode ===============================================
%%   Abstract:
%%     Returns true/false, depending on if the DWork is from a ModelRef
%%     block whose referenced model's target language is 'C++ (Encapsulated)'.
%%
%function FcnIsDWorkFromMdlBlockInCppClassGenMode(dwRec) void
    %if dwRec.SigSrc[0] >= 0 && dwRec.SigSrc[2] >= 0
        %assign blk = System[dwRec.SigSrc[0]].Block[dwRec.SigSrc[2]]
        %assign recIDNum = IDNUM(dwRec.Name)
        %if blk.Type != "ModelReference"
            %return TLC_FALSE
        %elseif !ISFIELD(blk,"MdlRefIsCPPClassGenMode")
            %return TLC_FALSE
        %else
            %return blk.MdlRefIsCPPClassGenMode && recIDNum[0] == "InstanceData"
        %endif
    %endif
%endfunction %% FcnIsDWorkFromMdlBlockInCppClassGenMode

%function FcnGenDWorkDefNotHandledInVarGroup(dwRec)

    %assert dwRec.StorageClass == "Auto" && ...
        !FcnGetOptimizedAwayInTLC(dwRec) && ...
        !FcnIsDWorkFromMdlBlockInCppClassGenMode(dwRec)
    %if dwRec.SigSrc[0] < 0 || dwRec.SigSrc[2] < 0
        %createrecord ownerBlk { Type "InputPort" }
    %else
        %assign ownerBlk = System[dwRec.SigSrc[0]].Block[dwRec.SigSrc[2]]
    %endif

    %openfile retBuf
    %assign dwId = LibGetRecordIdentifier(dwRec)
    %if dwRec.BitFieldWidth > 0
        %assign referencedBy = SLibReferencedBy(dwRec)
        %assign traceMarker = SLibAddBlockTrace(referencedBy)
        %<SLibTraceBegin(traceMarker)>
        %assign bitfldtype = SLibGetTypeForBitfield(dwRec.BitFieldWidth)
        %<bitfldtype> %<dwId>:%<dwRec.BitFieldWidth>; /* %<referencedBy> */
        %<SLibTraceEnd(traceMarker)>
    %elseif (dwRec.Origin == "RWORK" || dwRec.Origin == "IWORK" ...
        || dwRec.Origin == "PWORK")
        %switch dwRec.Origin
          %case "RWORK"
            %<FcnDefineDWorkRecord(dwRec, "RWork", "%<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)> ")>\
            %break
          %case "IWORK"
            %<FcnDefineDWorkRecord(dwRec, "IWork", "%<LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)> ")>\
            %break
          %case "PWORK"
            %<FcnDefineDWorkRecord(dwRec, "PWork", "void *")>\
            %break
        %endswitch
    %elseif Accelerator && ownerBlk.Type == "S-Function" && ...
        ownerBlk.ParamSettings.Inlined == "no" && ...
        !dwRec.IsDataStoreReference && ...
        !LibIsFundamentalBuiltInDataType(SLibGetRecordDataTypeId(dwRec)) && ...
        !dwRec.DWorkForDimSize
        %assign dataType = "char"
        %assign optWidth = SLibDWorkWidth(dwRec) * ...
            LibGetDataTypeSLSizeFromId(SLibGetRecordDataTypeId(dwRec))
        %if SLibDWorkIsComplex(dwRec)
            %assign optWidth = optWidth * 2
        %endif
        %assign optWidth = "[%<optWidth>]"
        %% block traceability
        %assign referencedBy = SLibReferencedBy(dwRec)
        %assign traceMarker = SLibAddBlockTrace(referencedBy)
        %<SLibTraceBegin(traceMarker)>
        %<dataType> %<dwId>%<optWidth>; /* %<referencedBy> */
        %<SLibTraceEnd(traceMarker)>
    %endif
    %closefile retBuf
    %return retBuf
%endfunction

%% Function: LibCacheSystemDWorkStructDef ==========================================================
%% Abstract:
%%   Caches the definition of the system DWork structure.
%%
%function LibCacheSystemDWorkStructDef(sysIdx) void
    %if !SLibSystemHasOwnDataScope(System[sysIdx])
        %return
    %endif
    %assign dWorkBuff = SLibGetSystemDataDefUsingVarGroup(sysIdx,"DWork")
    %assign unifiedDefs = FcnUnifySystemDataDef(dWorkBuff.Members)
    %assign dWorkDef = ""
    %assign identifierTag = ""
    %assign sysInfo = GetSystemNameForComments(System[sysIdx])
    %openfile comment
    %if ::CompiledModel.DWorkAndBlockIOCombined
        /* Block signals and states (%<::AutoOrDefaultStorageClass> storage) for %<sysInfo> */
    %else
        /* Block states (%<::AutoOrDefaultStorageClass> storage) for %<sysInfo> */
    %endif
    %closefile comment
    %if (sysIdx < (NumSystems-1))
        %if !GenerateClassInterface || !IsModelReferenceBaseSys(System[sysIdx])
            %assign identifier = FcnSysVarGroupType(System[sysIdx],"DWork")
        %else
            %assign identifier = ::tDWorkType
        %endif
    %else
        %assign ::CompiledModel.DWorkStructDefn = ...
            WHITE_SPACE(unifiedDefs)?"":"Nonempty"
        %assign identifier = ::tDWorkType
        %if SLibAutosarActive()
            %assign identifierTag = ::CompiledModel.GlobalScope.tDWorkTypeTag
        %endif
    %endif
    %%

    %if dWorkBuff.NumMembers > 0 %% number of elements
        %openfile dWorkDef
        %<comment>\

        %assign nonInlSysIdx = System[sysIdx].NonInlinedParentSystemIdx
        %assign isHiddenFromParent = CGMODEL_ACCESS("CGModel.isVarGroupTypeHiddenFromParent", ...
            "DWork", nonInlSysIdx)
        %assign needsHideChild =  isHiddenFromParent && !IsRemoveHideChildFeatureOn()
        %if needsHideChild
            %<GetHideChildDefineSymbol("ifndef")>\
        %endif
        %<SLibDumpStructDefWithAlignment(identifierTag, identifier, dWorkBuff.Alignment, unifiedDefs)>

        %if needsHideChild
            %<GetHideChildDefineSymbol("endif")>\
        %endif

        %closefile dWorkDef

        %if ISEMPTY(dWorkDef)
            %return
        %endif

        %%
        %if SLibIsSystemTypesModelClassNamespace(System[sysIdx])
            %<SLibCacheCPPEncapModelData("Typedefs", dWorkDef)>
        %elseif IsRemoveHideChildFeatureOn() && isHiddenFromParent && ...
            CGMODEL_ACCESS("CGModel.dumpSysCodeIntoModelFile", sysIdx)
            %% todo: MODELREF-4590
            %<SLibCacheCodeToFile("mdl_priv_constParam_typedef", dWorkDef)>
            %% register var types in symbol table so that decl files can be included properly.
            %assign targetFile = SLibGetFullFileNameForCode("mdl_priv_constParam_typedef")
            %assign varTypes = REGEXP_MATCH(dWorkDef, "(\\w+)(?=(\\s+)(\\w+);)")
            %assign varNum = SIZE(varTypes, 1)
            %foreach idx = varNum
                %assign type = varTypes[idx]
                %<SLibUpdateLocalSymbolTableForFile(targetFile, type)>
            %endforeach
        %else
            %<SLibCacheSystemCodeToFile("sys_data_DWork_typedef", System[sysIdx], dWorkDef)>
        %endif
    %endif
%endfunction %% LibCacheSystemDWorkStructDef

%% Function: LibCacheNonAutoStorageClassDWorkDefinition ============================================
%% Abstract:
%%   Cache the DWorks that have non-default storage class.
%%
%function LibCacheNonAutoStorageClassDWorkDefinition() void

    %assign numDWorks = ::CompiledModel.DWorks.NumDWorks

    %if numDWorks == 0
        %assign ::CompiledModel.ExportedGlobalDWorkDefn = ""
        %assign ::CompiledModel.ImportedExternDWorkDefn = ""
        %assign ::CompiledModel.ImportedExternPointerDWorkDefn = ""
        %return ""
    %endif

    %openfile exportedGlobalsBuffer
    %openfile importedExternBuffer
    %openfile importedExternPointerBuffer
    %foreach dwIdx = numDWorks

        %assign dwRec = ::CompiledModel.DWorks.DWork[dwIdx]

        %if  dwRec.StorageClass == "Auto"
            %continue
        %endif

        %switch dwRec.StorageClass
          %case "ExportedGlobal"
            %selectfile exportedGlobalsBuffer
            %break
          %case "ImportedExtern"
            %selectfile importedExternBuffer
            %break
          %case "ImportedExternPointer"
            %selectfile importedExternPointerBuffer
            %break
          %case "Custom"
            %break
          %default
            %assign errTxt = "Should not get here"
            %<LibReportFatalError(errTxt)>
        %endswitch

        %<FcnGenerateBlockDWorkExternalDefinition(dwRec)>

        %if dwRec.Padding != 0
            %assign optPadWidth = LibOptionalVectorWidth(dwRec.Padding)
            %assign dwId = LibGetRecordIdentifier(dwRec)
            char pad_%<dwId>%<optPadWidth>;
        %endif

        %if dwRec.StorageClass == "Custom"
            %continue
        %endif

        %if dwRec.StorageClass == "ExportedGlobal"
            %assign headerFileName = SLibGetFileNameForCode("data_exportGlobal_decl") + ".h"
        %else
            %assign headerFileName = SLibGetFileNameForCode("data_importedData_decl") + ".h"
        %endif
        %<FcnUpdateExternalSignalDeclFilePackaging(dwRec, headerFileName)>\
    %endforeach
    %closefile exportedGlobalsBuffer
    %closefile importedExternBuffer
    %closefile importedExternPointerBuffer

    %assign ::CompiledModel.ExportedGlobalDWorkDefn = exportedGlobalsBuffer
    %assign ::CompiledModel.ImportedExternDWorkDefn = importedExternBuffer
    %assign ::CompiledModel.ImportedExternPointerDWorkDefn = importedExternPointerBuffer

%endfunction %% LibCacheNonAutoStorageClassDWorkDefinition


%% Function: LibDWorkStructIsEmpty =================================================================
%% Abstract:
%%   Does the root system have any DWorks?
%%
%function LibDWorkStructIsEmpty() void
    %assign baseSysIdx = GetBaseSystemIdx()
    %assert (LibGetFieldSet(System[baseSysIdx], "HasDWorkArg") == 1)
    %return (System[baseSysIdx].HasDWorkArg == 0)
%endfunction

%% Function: SLibDModelWorkStructIsEmpty ===========================================================
%% Abstract:
%%   Does the model have any DWorks?
%%
%function SLibModelDWorkStructIsEmpty() void
    %if IsModelReferenceTarget()
        %return LibDWorkStructIsEmpty()
    %else
        %return (::CompiledModel.HasDWorkArg == 0)
    %endif
%endfunction

%% Function: SLibGetDataStoreForHasBeenInitIdentifier ==============================================
%% Abstract:
%%   Return name of shared local data store for preventing re-initialization
%%   of shared data.
%%
%function SLibGetDataStoreForHasBeenInitIdentifier() void
    %if !ISFIELD(::CompiledModel.DWorks, "SharedLocalDSMForHasBeenInit_Identifier")
        %addtorecord ::CompiledModel.DWorks SharedLocalDSMForHasBeenInit_Identifier ""

        %foreach dwIdx = ::CompiledModel.DWorks.NumDWorks
            %assign dwRec = ::CompiledModel.DWorks.DWork[dwIdx]
            %if (dwRec.SharedLocalDSMForHasBeenInit)
                %assign id = LibGetRecordIdentifier(dwRec)
                %if (ISFIELD(dwRec, "VarGroupIdx"))
                    %assign baseSysIdx = GetBaseSystemIdx()
                    %assign path = SLibCGIRVarGroupPath(dwRec.VarGroupIdx[0], baseSysIdx, TLC_FALSE)
                    %assign id = path + id
                %endif
                %assign ::CompiledModel.DWorks.SharedLocalDSMForHasBeenInit_Identifier = id
                %break
            %endif
        %endforeach
    %endif
    %return ::CompiledModel.DWorks.SharedLocalDSMForHasBeenInit_Identifier
%endfunction

%% Function: FcnGetOptimizedAwayInTLC ==============================================================
%% Abstract:
%%   Determine if optimized away dwork in TLC, e.g. for model reference block
%%   whose model interface reveals that it does not have dwork.  This
%%   should only be used for the dworks of model reference blocks, since
%%   NumDWorks is subject to misinterpretation with respect to this optimization.
%%   We have made sure that where NumDWorks is used we take this
%%   optimization into account with the assumption that it will only
%%   apply to the dworks of model reference blocks.
%% TopTester: test/toolbox/simulink/variants/var-vss-codevariants/tcodevariants6.m
%% TopTester: test/toolbox/simulink/variants/var-vss-codevariants/tcodevariants9.m
%% TopTester: test/toolbox/rtw/targets/AUTOSAR/Variants/tValueVariants.m
%% TopTester: test/toolbox/simulink/variants/var-vss-general/tvss_sim_code_match_g984892.m
%%
%function FcnGetOptimizedAwayInTLC(dwRec) void
    %if !ISFIELD(dwRec, "LogicalSrc")
        %return TLC_FALSE
    %endif
    %assign idNum        = IDNUM(dwRec.LogicalSrc)
    %assign dwRecIdx  = idNum[1]
    %return CGMODEL_ACCESS("CGModel.IsDWorkOptimizedAwayInTLC", dwRecIdx)
%endfunction

%endif %%  _COMMONHDR_DWORKLIB_
