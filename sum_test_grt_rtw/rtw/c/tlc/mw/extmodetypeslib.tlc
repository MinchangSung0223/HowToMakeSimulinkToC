%% ============================================================================
%%
%%
%%
%%
%% Abstract:
%%   This system file creates ext_mode_types.h file for code generation's
%%   RealTime and Embedded-c code formats.
%%
%%   The file contains the definition of the data types required by the
%%   ext_mode.h External Mode Abstraction Layer introduced with XCP
%%   communication protocol
%%
%% Copyright 2018-2023 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%if EXISTS(_EXTMODETYPES_) == 0
%assign _EXTMODETYPES_ = 1

%% Function: SLibWriteExtModeTypesFile =============================================================
%% Abstract:
%%  The output of this file provides information on the External Mode data types
%%  that are model specific
%%
%%
%function SLibWriteExtModeTypesFile() void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %realformat "CONCISE"

    %if PurelyIntegerCode
        %% In the current implementation XCP-based External Mode only supports Base Rate values
        %% greater or equal than 1 us (for further details please refer to g1561360)

        %assign baseRateModMicrosecond = FEVAL("mod", CompiledModel.FundamentalStepSize, 0.000001)
        %assign EPS = FEVAL("eps", CompiledModel.FundamentalStepSize)

        %% Generate an error if either the resolution or the actual FundamentalStepSize are below 1us
        %if (baseRateModMicrosecond > EPS)
            %<SLibReportErrorWithId("RTW:tlc:XCPFixedStepResolutionOnIntegerCode")>
        %endif
    %endif


    %assign ExtModeTypesHeaderFileName = "ext_mode_types"
    %if RTWVerbose
        %selectfile STDOUT
%%}}
### Creating external mode types file %<ExtModeTypesHeaderFileName>.h
%%{{
        %selectfile NULL_FILE
    %endif

    %openfile ExtModeTypesDotH = "%<ExtModeTypesHeaderFileName>.h"
    /*
    * %<ExtModeTypesHeaderFileName>.h
    *
    %<SLibCommonHeaderInfo()>\
    */

    #ifndef EXT_MODE_TYPES_H
    #define EXT_MODE_TYPES_H

    %% #include "rtwtypes.h" or <stdint.h>, <stdbool.h> according to basic type settings
    %<LibEmitPlatformTypeIncludes()>

    %% TopTester: test/toolbox/coder/build/sl/rtw_build_process/tLegacyTMF.m

    /** External Mode Event ID */
    typedef %<uint16Type>    extmodeEventId_T;


    /** External Mode real time, measured using the target's clock */
    typedef %<uint32Type>    extmodeRealTime_T;


    /** External Mode simulation time */
    %if ExtModeXCPSimulationTimeInTicks
        typedef %<uint32Type>    extmodeSimulationTime_T;
    %else
        typedef %<FcnGetDtypeName("TIME")>   extmodeSimulationTime_T;
    %endif

    /** External Mode double data type */
    %if !PurelyIntegerCode
        typedef %<FcnGetDtypeName("double")>   extmodeDouble_T;
    %endif

    %if PurelyIntegerCode
        %% TopTester: test/toolbox/coder/xcp/txcp_integer.m

        /** External Mode classic trigger signal */
        typedef %<int32Type>   extmodeClassicTriggerSignal_T;

    %else

        /** External Mode classic trigger signal */
        typedef %<realType>    extmodeClassicTriggerSignal_T;

    %endif

    /** Run the simulation forever (infinite simulation end time) */
    #define EXTMODE_SIMULATION_RUN_FOREVER  ((extmodeSimulationTime_T) -1)

    %assign ::Tid01Eq = ISEQUAL(CompiledModel.SolverType, "FixedStep") && ...
        CompiledModel.FixedStepOpts.TID01EQ

    /* Define max value of 32-bit unsigned type */
    %% TODO(g2611741): replace 0xFFFFFFFFU with %<GET_TYPE_ID_REPLACEMENT("MAX_%<LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)>")>
    #define XCP_UINT32_MAX 0xFFFFFFFFU

    %if PurelyIntegerCode || ExtModeXCPSimulationTimeInTicks
        %assign stepSizeInMicroseconds = CAST("Number",(CompiledModel.FundamentalStepSize*1000000) + 0.5)
        %assign clockTick_DTypeId = SampleTime[0].ClockTickDataTypeId
        %assign dtypeName = LibGetDataTypeNameFromId(LibGetDataTypeIdAliasedThruToFromId(clockTick_DTypeId))

        /** External Mode MAX simulation time */
        %if ExtModeXCPSimulationTimeInTicks
            %% Use GET_TYPE_ID_REPLACEMENT API for language standard types support
            #define MAX_extmodeSimulationTime_T XCP_UINT32_MAX
        %else
            %% Use GET_TYPE_ID_REPLACEMENT API for language standard types support
            %% Note that uint32_T needs to be hardcoded, as MAX_uint32_t does not work
            %assign dtypeTime = FcnGetDtypeName("TIME")
            %if !ISEQUAL(dtypeTime, LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32))
                %error "Unsupported type for TIME"
            %endif
            #define MAX_extmodeSimulationTime_T %<GET_TYPE_ID_REPLACEMENT("MAX_uint32_T")>
        %endif

        %% Depending on the application lifespan, the data type of clock Tick can
        %% be timer_uint32_pair. If this is the case, we limit the MAX BaseRate
        %% Simulation Time to max of uint32 type. This should not cause any issues
        %% as timestamp in ticks is handled in XCP slave code using uint32 pair.
        /** External Mode MAX base rate simulation time */
        %if ExtModeXCPSimulationTimeInTicks && ISEQUAL(dtypeName, "timer_uint32_pair_T")
            %% Use GET_TYPE_ID_REPLACEMENT API for language standard types support
            #define EXTMODE_MAX_BASE_RATE_SIMULATION_TIME XCP_UINT32_MAX
        %else
            %% Use GET_TYPE_ID_REPLACEMENT API for language standard types support
            %assign dtRecord = ::CompiledModel.DataTypes.DataType[clockTick_DTypeId]
            %assign dtName = dtRecord.DTName
            %if !ISEQUAL(dtName, "uint8") && !ISEQUAL(dtName, "uint16") && !ISEQUAL(dtName, "uint32") && !ISEQUAL(dtName, "uint64")
                %error "Unsuported type for base rate clock"
            %endif
            #define EXTMODE_MAX_BASE_RATE_SIMULATION_TIME %<GET_TYPE_ID_REPLACEMENT("MAX_%<dtName>_T")>
        %endif

        /** External Mode Step Size in microseconds */
        #define EXTMODE_STEP_SIZE_IN_MICROSECONDS  %<stepSizeInMicroseconds>

    %endif

    /** External Mode Base rate event id */
    #define EXTMODE_BASE_RATE_EVENT_ID  %<Tid01Eq>

    /** External Mode Max Event Id */
    #define  EXTMODE_MAX_EVENT_ID   0xFF

    #endif /* EXT_MODE_TYPES_H */


    /* [EOF] %<ExtModeTypesHeaderFileName>.h */
    %closefile ExtModeTypesDotH
    %<SLibAddGeneratedFileToList("%<ExtModeTypesHeaderFileName>.h","interface","header","")>
    %selectfile NULL_FILE
%endfunction %% SLibWriteExtModeTypesFile

%endif %% _EXTMODETYPES_

%% [EOF] extmodetypes.tlc
