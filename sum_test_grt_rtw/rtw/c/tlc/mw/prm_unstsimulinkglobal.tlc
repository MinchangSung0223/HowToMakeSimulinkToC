%% =============================================================================
%% File: prm_unstsimulinkglobal.tlc
%%
%% Abstract:
%%
%%
%%
%%
%% Copyright 2005-2023 The MathWorks, Inc.
%%
%% =============================================================================
%selectfile NULL_FILE

%if EXISTS(_PRM_UNSTSIMULINKGLOBAL_) == 0
%assign _PRM_UNSTSIMULINKGLOBAL_ = 1

%include "prm_cacheutils.tlc"


%% Function: SLibUnstructuredCacheSimulinkGlobalPrmBuffers =========================================
%% Abstract:
%%   Generate the Decl & Instance buffers for UnstructuredSimulinkGlobal parameters.
%%   This function can be called only in two of the three parameter tuning modes:
%%   DialogOnly (InlineParameters == 0) and VariableOnly (InlineParameters == 1).
%%
%function SLibCacheUnstructuredSimulinkGlobalPrmBuffers(startIdx) void

    %assert (InlineParameters != 2)

    %<SLibCreatePrmBuffer("UnstructuredSimulinkGlobal", "Decl")>
    %<SLibCreatePrmBuffer("UnstructuredSimulinkGlobal", "Instance")>

    %% Generate the parameter declaration buffer
    %assign declBuffer = FcnGenUnstructuredSimulinkGlobalPrmDecl(startIdx)
    %<SLibSetPrmBufferPart("UnstructuredSimulinkGlobal", "Decl", ...
        "Code", declBuffer)>

    %% Generate the parameter instantiation buffer
    %%
    %% NOTE:
    %% Always generate the ParamsInst buffer to be included in:
    %% - top_model.c   (if reqInsts.ParamsInst == TLC_TRUE), or
    %% - submodel_sf.c (if generating code for model reference target)
    %assign instanceBuffer = FcnGenUnstructuredSimulinkGlobalPrmInstance(startIdx)
    %<SLibSetPrmBufferPart("UnstructuredSimulinkGlobal", "Instance", ...
        "Code", instanceBuffer)>

%endfunction %% SLibCacheUnstructuredSimulinkGlobalPrmBuffers


%% Function: FcnGenUnstructuredSimulinkGlobalPrmDecl ===============================================
%% Abstract:
%%   Generate the UnstructuredSimulinkGlobal parameters declaration buffer
%%
%function FcnGenUnstructuredSimulinkGlobalPrmDecl(startIdx) void

    %assign cacheBuffer = ""
    %assign numParams = SLibAreSimulinkGlobalParamsUnstructured() ? ...
        NumInrtP : NumInMdlRefGlobal
    %assign headerFileName = SLibGetFileNameForCode("data_simulinkGlobal_decl") + ".h"
    %foreach prmIdx = numParams
        %assign mdlParam = Parameter[startIdx + prmIdx]
        %assign buffer = SLibGenModelParamDecl(mdlParam, TLC_TRUE)
        %assign cacheBuffer = cacheBuffer + buffer
        %if !WHITE_SPACE(buffer)
            %<FcnUpdateModelParamDeclFilePackaging(mdlParam, headerFileName)>
        %endif
    %endforeach

    %return cacheBuffer

%endfunction %% FcnGenUnstructuredSimulinkGlobalPrmDecl


%% Function: FcnGenUnstructuredSimulinkGlobalPrmInstance ===========================================
%% Abstract:
%%   Generate the constant parameters instantiation buffer
%%
%function FcnGenUnstructuredSimulinkGlobalPrmInstance(startIdx) void

    %assign cacheBuffer = ""
    %assign numParams = SLibAreSimulinkGlobalParamsUnstructured() ? ...
        NumInrtP : NumInMdlRefGlobal
    %assign sourceFileName = SLibGetFileNameForCode("mdldata_data_defn") + "." + ::LangFileExt
    %foreach prmIdx = numParams
        %assign mdlParam = Parameter[startIdx + prmIdx]
        %assign buffer = SLibGenUnstrModelParamInstance(mdlParam, TLC_TRUE, prmIdx, -1)
        %assign cacheBuffer = cacheBuffer + buffer
        %if !WHITE_SPACE(buffer) && !IsModelReferenceTarget()
            %<SLibUpdateLocalSymbolTableForFile(sourceFileName, SLibGetModelParamName(mdlParam))>
            %if ISFIELD(mdlParam, "IsSymbolicValue")
                %assign paramIdx = []
                %assign paramIdx = paramIdx + %<SLibGetModelParameterIndex(mdlParam)>
                %<SLibUpdateHeadersNeededByParamsUsingSymbolicValue(paramIdx, sourceFileName)>
            %endif
        %endif
    %endforeach

    %return cacheBuffer

%endfunction %% FcnGenUnstructuredSimulinkGlobalPrmInstance

%endif %% EXISTS(_PRM_UNSTSIMULINKGLOBAL_)

%% [EOF] prm_unstsimulinkglobal.tlc
