%% ==============================================================================
%%
%%
%%
%%
%% Abstract:
%%   Output file template library
%%
%% Copyright 1994-2023 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%include "codetemplate_private_api.tlc"
%include "code_template_api.tlc"

%% =============================================================================
%% Public functions
%% =============================================================================

%% DocFunction{Code Configuration Functions}: LibCreateSourceFileAtPath ===============
%% Abstract:
%%   Create a new C file, and return its reference.  If the file already exists,
%%   simply return its reference.
%%
%% Call syntax:
%%   %assign fileH = LibCreateSourceFileAtPath("Source", "Custom", "../slprj/ert/_shareutils/foofile","foofile")
%%
%% Arguments:
%%   type (String):
%%     Valid values are "Source" and "Header" for .c and .h files,
%%     respectively.
%%
%%   creator (String):
%%     Who's creating the file?  An error is reported if different creators
%%     attempt to create the same file.
%%
%%   namewithpath (String):
%%     Name of the file (with the file path but without the extension).
%%
%%   basename (String):
%%     Name of the file (without the path or extension).
%%
%%   Note: For files destined to the model build dir, use the simpler
%%         LIbCreateSourceFile(type,creator,name)
%%
%% Note: File are not written to disk if they are empty.
%%
%% Returns:
%%   Reference to the model file (Scope).
%%
%function LibCreateSourceFileAtPath(type,creator,namewithpath,basename) void
    %assign type = (type == "Source") ? "SystemBody" : "SystemHeader"
    %return SLibAddModelFileWithBasename(type,creator,namewithpath,basename)
%endfunction

%% Function: LibGetSourceFileSection ===============================================================
%% Abstract:
%%   Get the contents of a file.  See LibSetSourceFileSection for list of valid
%%   sections.
%%
%%  Arguments:
%%    fileIndex - Reference or index to a file (Scope or Number).
%%    section   - File section of interest (String).

%function LibGetSourceFileSection(fileIdx, section) void
    %if TYPE(fileIdx) != "Number"
        %if TYPE(fileIdx) == "Scope"
            %assign fileIdx = fileIdx.Index
        %else
            %assign errTxt = "LibGetSourceFileSection expects an index or a " ...
                "reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif
    %return LibGetModelFileAttribute(fileIdx,section)
%endfunction

%% Function: LibGetSourceFileIndent ================================================================
%% Abstract:
%%   Get the Indent flag of a file.
%%
%%  Arguments:
%%    fileIndex - Reference or index to a file (Scope or Number).

%function LibGetSourceFileIndent(fileIdx) void
    %if TYPE(fileIdx) != "Number"
        %if TYPE(fileIdx) == "Scope"
            %assign fileIdx = fileIdx.Index
        %else
            %assign errTxt = "LibGetSourceFileSection expects an index or a " ...
                "reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif

    %return SLibDirectAccessGetFileAttribute(::CompiledModel.ModelFiles.ModelFile[fileIdx], "Indent")
%endfunction

%% Function: LibGetSourceFileShared ================================================================
%% Abstract:
%%   Get the Shared flag of a file. This is set for shared utility functions
%%   being generated to _sharedutils. Note shared type use a different flag
%%   (see LibGetSourceFileSharedType())
%%
%%  Arguments:
%%    fileIndex - Reference or index to a file (Scope or Number).

%function LibGetSourceFileShared(fileIdx) void
    %if TYPE(fileIdx) != "Number"
        %if TYPE(fileIdx) == "Scope"
            %assign fileIdx = fileIdx.Index
        %else
            %assign errTxt = "LibGetSourceFileSection expects an index or a " ...
                "reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif

    %return SLibDirectAccessGetFileAttribute(::CompiledModel.ModelFiles.ModelFile[fileIdx], "Shared")
%endfunction

%% Function: LibGetSourceFileSharedType ============================================================
%% Abstract:
%%   Get the Shared Type flag of a file. This is set for shared types
%%   being generated to _sharedutils. Note shared type use a different flag
%%   (see LibGetSourceFileSharedType())
%%
%%  Arguments:
%%    fileIndex - Reference or index to a file (Scope or Number).

%function LibGetSourceFileSharedType(fileIdx) void
    %if TYPE(fileIdx) != "Number"
        %if TYPE(fileIdx) == "Scope"
            %assign fileIdx = fileIdx.Index
        %else
            %assign errTxt = "LibGetSourceFileSection expects an index or a " ...
                "reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif

    %return SLibDirectAccessGetFileAttribute(::CompiledModel.ModelFiles.ModelFile[fileIdx], "SharedType")
%endfunction

%% Function: LibIndentSourceFile ===================================================================
%% Abstract:
%%   Indent a file with the c_beautifier utility (from within TLC environment).
%%
%% Call syntax:
%%   %<LibIndentSourceFile("foofile.c","")>
%%
%% Arguments:
%%   fileName  - Name of file (String).
%%   modelName - Name of model (String). (optional argument)
%%

%function LibIndentSourceFile(fileName,modelName) void
    %<SLibIndentFile(fileName,modelName)>
%endfunction

%% DocFunction{Code Configuration Functions}: LibCallModelInitialize ============
%% Abstract:
%%   Returns necessary code for calling the model's initialize function (valid
%%   for ERT only).

%function LibCallModelInitialize() void
    %openfile tmpFcnBuf
    %<GenerateModelInitFcnName()>(%<SLibModelFcnArgs("Initialize",TLC_TRUE,"")>);
    %closefile tmpFcnBuf
    %return tmpFcnBuf
%endfunction

%% DocFunction{Code Configuration Functions}: LibCallModelStep ==================
%% Abstract:
%%   Returns necessary code for calling the model's step function (valid
%%   for ERT only).

%function LibCallModelStep(tid) void
    %assign rootSystem.CurrentTID =tid
    %openfile tmpFcnBuf
    %<FcnCallMdlStep(tid)>
    %closefile tmpFcnBuf
    %return tmpFcnBuf
%endfunction

%% DocFunction{Code Configuration Functions}: LibCallModelTerminate =============
%% Abstract:
%%   Returns necessary code for calling the model's terminate function (valid
%%   for ERT only).

%function LibCallModelTerminate() void
    %openfile tmpFcnBuf
    %if IncludeMdlTerminateFcn
        %<::CompiledModel.Name>_terminate(%<SLibModelFcnArgs("Terminate",TLC_TRUE,"")>);
    %endif
    %closefile tmpFcnBuf
    %return tmpFcnBuf
%endfunction

%% DocFunction{Code Configuration Functions}: LibCallSetEventForThisBaseStep ====
%% Abstract:
%%   Returns necessary code for calling the model's set events function (valid
%%   for ERT only).
%%
%% Args:
%%   buffername - Name of the variable used to buffer the events.  For the
%%                example ert_main.c this is "eventFlags".

%function LibCallSetEventForThisBaseStep(buffername) void
    %return EventFlagsFunction("%<::CompiledModel.Name>_", buffername)
%endfunction

%% DocFunction{Code Configuration Functions}: LibWriteModelData =================
%% Abstract:
%%   Returns necessary data for the model (valid for ERT only).

%function LibWriteModelData() void
    %return SLibDeclareModelFcnArgs(TLC_TRUE)
%endfunction

%% DocFunction{Code Configuration Functions}: LibSetRTModelErrorStatus ==========
%% Abstract:
%%   Returns the code required set the model error status
%%
%% Args:
%%   str (String) - char * to a C string
%%
%% Call syntax:
%%   %<LibSetRTModelErrorStatus("\"Overrun\"")>;

%function LibSetRTModelErrorStatus(str) void
    %return RTMSetErrStat(str)
%endfunction

%% DocFunction{Code Configuration Functions}: LibGetRTModelErrorStatus ==========
%% Abstract:
%%   Returns the code required to get the model error status
%%
%% Call syntax:
%%   %<LibGetRTModelErrorStatus()>;

%function LibGetRTModelErrorStatus() void
    %return RTMGetErrStat()
%endfunction

%% This is temporary code to support timing service in code gen. Will be removed later.
%% See g2060510.
%function LibGetRTEHeaderFileName() void
    %return CGMODEL_ACCESS("CGModel.RTEHeaderFileName")
%endfunction

%% This is temporary code to support timing service in code gen. Will be removed later.
%% See g2060510.
%function LibGetRTESourceFileName() void
    %return "rte"
%endfunction

%% Function: LibIsSingleTasking ====================================================================
%% Abstract:
%%   Return true if the model is configured for singletasking execution and
%%   false otherwise (i.e., multitasking).

%function LibIsSingleTasking() void
    %return SLibSingleTasking()
%endfunction

%% DocFunction{Code Configuration Functions}: LibWriteModelInput ================
%% Abstract:
%%   Return the code necessary to write to a particular root input (i.e., a
%%   model inport block).   This function is valid for ERT only, and not valid
%%   for referenced models.
%%
%% Args:
%%   tid (Number):  Task identifier (0 is fastest rate and n is the slowest)
%%   rollThreshold: Width of signal before wrapping in a for loop.

%function LibWriteModelInput(tid,rollThreshold) void
    %if IsModelReferenceTarget()
        %assign errTxt = "LibWriteModelInput may not be called for referenced " + ...
            "models; you may wish to guard its invocation with !IsModelReferenceTarget()."
        %<LibReportError(errTxt)>
    %endif
    %openfile tmpFcnBuf
    %if MultiInstanceERTCode && !RootIOStructures
        %assign localUQualifier = "_"
    %else
        %assign localUQualifier = "."
    %endif
    %foreach idx = ExternalInputs.NumExternalInputs
        %assign extInp = ::CompiledModel.ExternalInputs.ExternalInput[idx]
        %with extInp
            %if TID == tid
                %assign rhs = "your_value"
                /* InportID: %<idx>, TaskID: %<tid> */
                %assign id = LibGetRecordIdentifier(extInp)
                %assign optStr = ""
                %if StorageClass == "Auto"
                    %assign optStr = "%<LibGetExternalInputStruct()>%<localUQualifier>"
                %endif
                %if StorageClass == "ImportedExternPointer"
                    %assign id = "%<id>_value"
                %endif
                %assign portWidth = LibGetRecordWidth(extInp)
                %assign isComplex = LibGetRecordIsComplex(extInp)
                %if portWidth == 1
                    %if isComplex
                        %<optStr>%<id>.re = %<rhs>;
                        %<optStr>%<id>.im = %<rhs>;
                    %else
                        %<optStr>%<id> = %<rhs>;
                    %endif
                %elseif portWidth < rollThreshold
                    %foreach sigIdx = portWidth
                        %if isComplex
                            %<optStr>%<id>[%<sigIdx>].re = %<rhs>;
                            %<optStr>%<id>[%<sigIdx>].im = %<rhs>;
                        %else
                            %<optStr>%<id>[%<sigIdx>] = %<rhs>;
                        %endif
                    %endforeach
                %else %% portWidth > rollThreshold
                    {
                        int i = 0;
                        for(i = 0; i < %<portWidth>; i++) {
                            %if isComplex
                                %<optStr>%<id>[i].re = %<rhs>;
                                %<optStr>%<id>[i].im = %<rhs>;
                            %else
                                %<optStr>%<id>[i] = %<rhs>;
                            %endif
                        }
                    }
                %endif
            %endif
        %endwith %% extInp
    %endforeach
    %closefile tmpFcnBuf
    %return tmpFcnBuf
%endfunction

%% DocFunction{Code Configuration Functions}: LibWriteModelOutput ===============
%% Abstract:
%%   Return the code necessary to write to a particular root output (i.e., a
%%   model outport block).   This function is valid for ERT only, and not valid
%%   for referenced models.
%%
%% Args:
%%   tid (Number):  Task identifier (0 is fastest rate and n is the slowest)
%%   rollThreshold: Width of signal before wrapping in a for loop.

%function LibWriteModelOutput(tid,rollThreshold) void
    %if IsModelReferenceTarget()
        %assign errTxt = "LibWriteModelOutput may not be called for referenced " + ...
            "models; you may wish to guard its invocation with !IsModelReferenceTarget()."
        %<LibReportError(errTxt)>
    %endif
    %openfile tmpFcnBuf
    %if MultiInstanceERTCode && !RootIOStructures
        %assign localYQualifier = "_"
    %else
        %assign localYQualifier = "."
    %endif
    %assign lhs = "your_variable"
    %foreach idx = ExternalOutputs.NumExternalOutputs
        %assign extOut       = ExternalOutputs.ExternalOutput[idx]
        %assign sysIdx       = extOut.Block[0]
        %assign blkIdx       = extOut.Block[1]
        %assign outportBlock = System[sysIdx].Block[blkIdx]
        %with System[sysIdx]
            %with outportBlock
                %if tid == SLibGetNumericTID(outportBlock)
                    %assign portWidth = LibBlockInputSignalWidth(0)
                    %assign id = LibGetRecordIdentifier(outportBlock)
                    /* OutportID: %<idx>, TaskID: %<tid> */
                    %assign oldBlockFcnVal = ::BlockFcn
                    %assign ::BlockFcn = "Output"
                    %if portWidth == 1
                        %if SLibExternalOutputIsVirtual(outportBlock)
                            %<lhs> = %<LibBlockInputSignal(0, "", "", 0)>;
                        %else
                            %<lhs> = %<LibGetExternalOutputStruct()>%<localYQualifier>%<id>;
                        %endif
                    %elseif portWidth < rollThreshold
                        %foreach sigIdx = portWidth
                            %if SLibExternalOutputIsVirtual(outportBlock)
                                %<lhs> = %<LibBlockInputSignal(0, "", "", sigIdx)>;
                            %else
                                %<lhs> = %<LibGetExternalOutputStruct()>%<localYQualifier>%<id>[%<sigIdx>];
                            %endif
                        %endforeach
                    %else %% portWidth > rollThreshold
                        {
                            int i = 0;
                            for(i = 0; i < %<portWidth>; i++) {
                                %if SLibExternalOutputIsVirtual(outportBlock)
                                    %<lhs>[i] = %<LibBlockInputSignal(0, "i", "", 0)>;
                                %else
                                    %<lhs>[i] = %<LibGetExternalOutputStruct()>%<localYQualifier>%<id>[i];
                                %endif
                            }
                        }
                    %endif
                    %assign ::BlockFcn = oldBlockFcnVal
                %endif
            %endwith %% outportBlock
        %endwith %% System[sysIdx]
    %endforeach
    %closefile tmpFcnBuf
    %return tmpFcnBuf
%endfunction

%% DocFunction{Code Configuration Functions}: LibWriteModelInputs ===============
%% Abstract:
%%   Return the code necessary to write to root inputs (i.e., all the
%%   model inport blocks).  This function is valid for ERT only, and not valid
%%   for referenced models.

%function LibWriteModelInputs() void
    %if IsModelReferenceTarget()
        %assign errTxt = "LibWriteModelInputs may not be called for referenced " + ...
            "models; you may wish to guard its invocation with !IsModelReferenceTarget()."
        %<LibReportError(errTxt)>
    %endif
    %openfile varbufs
    %foreach tid = LibNumRuntimeExportedRates()
        %<LibWriteModelInput(tid,RollThreshold)>\
    %endforeach
    %closefile varbufs

    %if WHITE_SPACE(varbufs)
        %return ""
    %else
        %openfile tmpFcnBuf
        #if 0
        %<varbufs>\
        #endif
        %closefile tmpFcnBuf
        %return tmpFcnBuf
    %endif
%endfunction

%% DocFunction{Code Configuration Functions}: LibWriteModelOutputs ==============
%% Abstract:
%%   Return the code necessary to write to root outputs (i.e., all the
%%   model outport blocks).   This function is valid for ERT only, and not valid
%%   for referenced models.

%function LibWriteModelOutputs() void
    %if IsModelReferenceTarget()
        %assign errTxt = "LibWriteModelOutputs may not be called for referenced " + ...
            "models; you may wish to guard its invocation with !IsModelReferenceTarget()."
        %<LibReportError(errTxt)>
    %endif
    %openfile varbufs
    %foreach tid = LibNumRuntimeExportedRates()
        %<LibWriteModelOutput(tid,RollThreshold)>\
    %endforeach
    %closefile varbufs

    %if WHITE_SPACE(varbufs)
        %return ""
    %else
        %openfile tmpFcnBuf
        #if 0
        %<varbufs>\
        #endif
        %closefile tmpFcnBuf
        %return tmpFcnBuf
    %endif
%endfunction

%function LibGetTID01EQ() void
    %return ::CompiledModel.FixedStepOpts.TID01EQ
%endfunction

%function LibGetSampleTimePeriodAndOffset(tid, idx) void
    %return ::CompiledModel.SampleTime[tid].PeriodAndOffset[idx]
%endfunction


%% DocFunction{Sample Time Functions}: LibNumRuntimeExportedRates ================
%% Abstract:
%%   Return the number of runtime exported rates in the model

%function LibNumRuntimeExportedRates() void
    %return ::CompiledModel.NumRuntimeExportedRates
%endfunction

%% DocFunction{Code Configuration Functions}: LibIsSourceFileCustomSection =====
%% Abstract:
%%   Returns whether a section is a custom section in the specified file.
%%
%%   Only available with Embedded Coder.
%%
%% Arguments:
%%   file           - Source file reference (Scope)
%%   sectionName    - Name of the (custom) section (String)
%function LibIsSourceFileCustomSection(file, sectionName) void
    %return IS_CUSTOM_SECTION(file.Index, sectionName)
%endfunction

%% DocFunction{Code Configuration Functions}: LibSetSourceFileVariantCustomSection =====
%% Abstract:
%%   Set a custom variant section previously created with LibAddSourceFileCustomSection.
%%
%%   Only available with Embedded Coder.
%%
%% Arguments:
%%   file   - Source file reference or index  (Scope or Number)
%%   attrib - Name of custom section          (String)
%%   value  - value to be appended to section (String)

%function LibSetSourceFileVariantCustomSection(file,attrib,value) void
    %if TYPE(file) != "Scope"
        %if TYPE(file) == "Number"
            %assign file = ::CompiledModel.ModelFiles.ModelFile[file]
        %else
            %assign errTxt = "LibSetSourceFileCustomSection expect a " ...
                "reference or an index to a file.  It was passed a: " ...
                "%<TYPE(file)>"
            %<LibReportError(errTxt)>
        %endif
    %endif

    %if ISEMPTY(value)
        %assign value = ""
    %endif
    %<ADD_CUSTOM_SECTION_CONTENT(file.Index, attrib, value,1)>
%endfunction

%% DocFunction{Code Configuration Functions}: LibGetSourceFileCustomSection =====
%% Abstract:
%%   Get a custom section previously created with LibAddSourceFileCustomSection.
%%
%% Arguments:
%%   file   - Source file reference or index (Scope or Number)
%%   attrib - Name of custom section         (String)

%function LibGetSourceFileCustomSection(file,attrib) void
    %if TYPE(file) != "Scope"
        %if TYPE(file) == "Number"
            %assign file = ::CompiledModel.ModelFiles.ModelFile[file]
        %else
            %assign errTxt = "LibGetSourceFileCustomSection expect a " ...
                "reference or an index to a file.  It was passed a: " ...
                "%<TYPE(file)>"
        %endif
    %endif

    %assign retVal = GET_CUSTOM_SECTION_CONTENT(file.Index, attrib)
    %return retVal
%endfunction


%% =============================================================================
%% Private functions (MathWorks use only)
%% =============================================================================

%function SLibGetTag(type, name) void

    %% In case name contains . and other funny char
    %assign name = LibConvertNameToIdentifier(name)

    %switch type
      %case "SystemHeader"
        %assign tag = "%<name>_h"
        %break
      %case "SystemBody"
        %assign tag = "%<name>_c"
        %break
      %default
        %assign errTxt = "unknown type: %<type>"
        %<LibReportFatalError(errTxt)>
    %endswitch
    %return tag
%endfunction

%function SLibSectionIsInFileContents(fileRec, sectionName) void
    %switch sectionName
      %case "Banner"
      %case "Includes"
      %case "ModelTypesIncludes"
      %case "ModelTypesDefines"
      %case "Defines"
      %case "ModelTypesTypedefs"
      %case "IntrinsicTypes"
      %case "PrimitiveTypedefs"
      %case "UserTop"
      %case "Typedefs"
      %case "GuardedIncludes"
      %case "Enums"
      %case "Definitions"
      %case "ExternData"
      %case "ExternFcns"
      %case "FcnPrototypes"
      %case "Declarations"
      %case "Functions"
      %case "CompilerErrors"
      %case "CompilerWarnings"
      %case "Documentation"
      %case "UserBottom"
        %return TLC_TRUE
      %default
        %return TLC_FALSE
    %endswitch
%endfunction

%% Function: SLibSetSourceFileCustomTokenInUse =====================================================
%% Abstract:
%%   The rtw_expand_template script identifies and set customs tokens with
%%   this function.  This allows custom sections to be placed in the
%%   appropriate section when a token is missing.
%%
%function SLibSetSourceFileCustomTokenInUse(fileIdx,token) void
    %<SET_CUSTOM_SECTION_TOKEN_IN_USE(fileIdx, token)>
%endfunction

%% Function: LibGetFileRecordName ==================================================================
%% Abstract:
%%   This function takes a model file record and returns the file name
%%   (including path) without the file extension. To retrieve the file name
%%   with file extension (including path), call LibGetModelFileAttribute and
%%   pass in "Name" as the file attribute.
%%
%function LibGetFileRecordName(fileRec) void
    %return GET_FILE_ATTRIBUTE(fileRec.Index, "NameWithoutExtension")
%endfunction

%% Function: FcnAppendMissingTokens ================================================================
%% Abstract:
%%   Since custom sections can be added without a corresponding token in
%%   the code template file, we need to gracefully accomodate missing tokens.
%%   If the custom token is missing, it's placed just below it's registered
%%   built-in section.
%%
%function FcnAppendMissingTokens(opFile,section) void
    %<APPEND_MISSING_TOKENS(opFile.Index, section)>
%endfunction


%% Check if model file exists
%function SLibDoesModelFileExist(type,name) void
    %assign fullName = LibGetFullFileName(name, type)
    %assign fileIdx = SOURCE_FILE_EXISTS(fullName)
    %if fileIdx >= 0
        %assign mf = ::CompiledModel.ModelFiles.ModelFile[fileIdx]
        %return mf
    %else
        %return ""
    %endif
%endfunction

%% Check if the file is an Imported shared type file
%function SLibFileContainsImportedSharedType(fileIdx) void
    %assign filter  = LibGetModelFileAttribute(fileIdx,"Filter")
    %assign isSharedType = LibGetSourceFileSharedType(fileIdx)
    %assign isImportedSharedTypeFile = filter && isSharedType
    %return isImportedSharedTypeFile
%endfunction

%% Function: SLibAssignCustomCodeTemplates
%% Iterate over each file in DataObjectUsage Vector and check if they are
%% custom. For custom files, retrieve the fileIdx and set the CodeTemplate
%% object appropriately
%function SLibAssignCustomCodeTemplates() void
    %if LibGetNumSourceFiles() > 0 && ISFIELD(::CompiledModel,"DataObjectUsage")
        %foreach fileIdx = ::CompiledModel.DataObjectUsage.NumFiles[0]
            %assign dataObjectFileRec = ::CompiledModel.DataObjectUsage.File[fileIdx]
            %if dataObjectFileRec.IsCustom == "yes"
                %assign type = dataObjectFileRec.Type
                %if type == "header"
                    %assign type = "SystemHeader"
                %elseif type == "source"
                    %assign type = "SystemBody"
                %endif

                %assign modelFile = SLibDoesModelFileExist(type, dataObjectFileRec.Name)
                %if !ISEMPTY(modelFile) && !WHITE_SPACE(modelFile)
                    %if dataObjectFileRec.Type == "header"
                        %<LibSetSourceFileCodeTemplate(modelFile, SLibSetCodeTemplate(ERTDataHdrFileTemplate))>
                    %else
                        %<LibSetSourceFileCodeTemplate(modelFile, SLibSetCodeTemplate(ERTDataSrcFileTemplate))>
                    %endif
                %endif
            %endif
        %endforeach
    %endif
%endfunction

%% Function: SLibUpdateMissingBanner ===============================================================
%% Update the banner section for a file if its banner section is missing.
%% This is generally true for shared files when generate custom banners is
%% is set to false.

%function SLibUpdateMissingBanner(fileIdx) void
    %assign FileName  = LibGetSourceFileSection(fileIdx,"Name")
    %if ISEMPTY(LibGetModelFileAttribute(fileIdx, "Banner"))
        %openfile bannerBuf
        /*
        * %<FileName>
        *
        %<SLibCommonUtilHeaderInfo()>\
        */
        %closefile bannerBuf
        %<LibSetSourceFileSection(fileIdx,"Banner", bannerBuf)>
    %endif
%endfunction

%% Function: SLibSetCodeTemplate ===================================================================
%% Update the CodeTemplate section for a file based on whether custom file
%% banners is allowed or not

%function SLibSetCodeTemplate(templateFile) void
    %if ERTCustomFileBanners
        %assign template = templateFile
    %else
        %assign template = "rtw_code.tlc"
    %endif
    %return template
%endfunction

%% Function: SLibDirectAccessSetFileAttribute ======================================================
%% Abstract:
%%   Sets specified attribute of a file directly. This differs from
%%   SLibSetModelFileAttribute in that SLibSetModelFileAttribute may format the data
%%   before setting the attribute, while this function sets the raw value of the attribute.
%%
%% Arguments:
%%   file - the file we are accessing
%%   attrib - the attribute name (e.g. WrittenToDisk, RequiredIncludes)
%%   value - the attribute value
%function SLibDirectAccessSetFileAttribute(file, attrib, value) void
    %assign success = SET_FILE_ATTRIBUTE(file.Index, attrib, value)
%endfunction

%% Function: SLibDirectAccessGetFileContent ========================================================
%% Abstract:
%%   Returns the specified content of a file directly. This differs from
%%   LibGetModelFileAttribute in that LibGetModelFileAttribute may format the data
%%   returned, while this function returns the raw value of the content.
%%
%% Arguments:
%%   file - the file we are accessing
%%   attrib - the content section name (e.g. Includes, Functions)
%function SLibDirectAccessGetFileContent(file, attrib) void
    %return GET_FILE_ATTRIBUTE(file.Index, attrib)
%endfunction

%% This utility function appends additional files to RequiredIncludes
%function FcnAddCoderTypesFilesToRequiredIncludes(opFile) void
    %if SLibGetModelFileDeferredIncludeCoderTypes(opFile)
        %if LibGetModelFileAttribute(opFile.Index, "Group") == "utility"

            %% Obtain basic types headers rtwtypes.h, stdbool.h, stdint.h,
            %% cstdint according to language standard settings
            %%
            %% TopTester: test/toolbox/rtw/targets/ert/tLangStandardTypes.m
            %% TopTester: test/toolbox/rtw/targets/ert/tResolvedTypesTlc.m
            %assign files = SLibCoderBasicTypesFilenames()

            %assign rtwCtx = ::CompiledModel.RTWContext
            %assign fileBaseName = SLibDirectAccessGetFileAttribute(opFile, "BaseName")

            %assign isMultiword = SLibIsHostBasedSimulationTarget() ? ...
                TLC_TRUE : ...
                FEVAL("rtwprivate", "retrieveMultiWordUtilitiesAndFunctions", "%<MasterSharedCodeManagerFile>", rtwCtx, fileBaseName)
            %if isMultiword
                %assign files = files + SLibCoderMultiwordTypesFilename()
            %endif
            %if LibIsHalfPrecisionUsed()
                %assign files = files + SLibCoderHalfTypeHdrFilename()
            %endif
            %if SLibDeclareImageTypeUsage()
                %assign files = files + SLibCoderImageTypeHdrFilename()
            %endif
        %else
            %assign files = SLibUsedCoderTypesFileNames()
        %endif
        %foreach fIdx = SIZE(files, 1)
            %<LibSetIncludesSection(opFile, "RequiredIncludes", files[fIdx])>
        %endforeach
    %endif
%endfunction

%function LibUseOldFilePackagingInfrastructure() void
    %return CGMODEL_ACCESS("FileRepository.getUseFilePackagingParser") == 0
%endfunction

%function LibWriteFileSectionToDisk(fileIndex, attrib) Output
    %assign opFile = ::CompiledModel.ModelFiles.ModelFile[fileIndex]
    %if attrib == "Includes" && LibUseOldFilePackagingInfrastructure()
        %<FcnAddCoderTypesFilesToRequiredIncludes(opFile)>
    %endif

    %<WRITE_FILE_SECTION(fileIndex, attrib)>
%endfunction

%% Only to be used with all types of includes sections
%function LibSetIncludesSection(fileIndex, attrib, value) void
    %assign fileName = LibGetModelFileAttribute(fileIndex.Index, "Name")
    %assign mainFileName = SLibGetFileNameForCode("main_src") + "." + ::LangFileExt
    %assign isMainFile = (fileName == mainFileName)
    %if LibUseOldFilePackagingInfrastructure() || isMainFile
        %<SLibSetModelFileAttribute(fileIndex, attrib, value)>
    %endif
%endfunction

%function LibCacheNewIncludes(fileIdx) void
    %assign opFile = ::CompiledModel.ModelFiles.ModelFile[fileIdx]
    %assign fileName = LibGetModelFileAttribute(opFile.Index, "Name")
    %assign baseName = LibGetFileName(fileName, "BaseFileName")

    %if baseName == "ert_main" || baseName == "rt_main" || baseName == "classic_main"
        %return
    %endif
    %assign status = CGMODEL_ACCESS("FileRepository.cacheFileNodeIncludes", fileName)
%endfunction

%% AccessType can be BaseFileName, BaseFileWithExt, Ext, FilePath
%function LibGetFileName(fileName, accessType) void
    %assign baseFileName = CGMODEL_ACCESS("FileRepository.getFilePartsFromFileName", fileName, accessType)
    %return baseFileName
%endfunction

%function LibClearFileSectionContents(fileIndex,attrib) void
    %if TYPE(fileIndex) != "Number"
        %if TYPE(fileIndex) == "Scope"
            %assign fileIndex = fileIndex.Index
        %else
            %assign errTxt = "LibClearFileSectionContents expects an index or a" ...
                " reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif
    %<CLEAR_FILE_SECTION(fileIndex,attrib)>
%endfunction

%function SLibGetModelFileIndent(opFile) void
    %return SLibDirectAccessGetFileAttribute(opFile, "Indent")
%endfunction

%function SLibSetModelFileIndent(opFile, setting) void
    %<SLibDirectAccessSetFileAttribute(opFile, "Indent", setting)>
%endfunction

%function SLibGetModelFileShared(opFile) void
    %return SLibDirectAccessGetFileAttribute(opFile, "Shared")
%endfunction

%function SLibSetModelFileShared(opFile, setting) void
    %<SLibDirectAccessSetFileAttribute(opFile, "Shared", setting)>
%endfunction

%function SLibGetModelFileSharedType(opFile) void
    %return SLibDirectAccessGetFileAttribute(opFile, "SharedType")
%endfunction

%function SLibSetModelFileSharedType(opFile, setting) void
    %<SLibDirectAccessSetFileAttribute(opFile, "SharedType", setting)>
%endfunction

%function SLibGetModelFileDeferredIncludeCoderTypes(opFile) void
    %return SLibDirectAccessGetFileAttribute(opFile, "DeferredIncludeCoderTypes")
%endfunction

%function SLibSetModelFileDeferredIncludeCoderTypes(opFile, setting) void
    %<SLibDirectAccessSetFileAttribute(opFile, "DeferredIncludeCoderTypes", setting)>
%endfunction

%function SLibGetModelFileIsEmpty(opFile) void
    %return SLibDirectAccessGetFileAttribute(opFile, "IsEmpty")
%endfunction

%% Function: LibGetModelFileNeedHeaderGuard ========================================================
%% Abstract:
%%   Return true if a header file guard is required, and false otherwise.
%%
%function LibGetModelFileNeedHeaderGuard(fileIdx) void
    %assign opFile = LibGetSourceFileFromIdx(fileIdx)
    %if LibGetModelFileAttribute(fileIdx,"Type") != "SystemHeader"
        %return 0
    %else
        %assign coderTypesFiles = SLibPotentialCoderTypesBaseNames()
        %assign nameForCompare = LibGetFileRecordName(opFile)

        %foreach fIdx = SIZE(coderTypesFiles, 1)
            %assign coderTypesFile = coderTypesFiles[fIdx]
            %if nameForCompare == coderTypesFile
                %return 0
            %endif
        %endforeach
    %endif
    %if CodeFormat == "S-Function"
        %assign tag = LibGetModelFileTag(fileIdx)
        %assign mdlName = LibGetModelName()
        %return tag != "%<mdlName>_mid_h" && tag != "%<mdlName>_sid_h"
    %else
        %return 1
    %endif
%endfunction

%% Function: LibGetSourceFileAttribute =============================================================
%% Abstract:
%%   Gets a specified attribute of a file.
%%   Valid attributes are:
%%     Name (with file extension)
%%     BaseName
%%     Type
%%     Creator
%%     SystemsInFile
%%     RequiredIncludes
%%     UtilityIncludes
%%     Filter
%%     IsEmpty
%%     Indent
%%     WrittenToDisk
%%     Shared
%%     SharedType
%%     CodeTemplate
%%     OutputDirectory
%%     Group
%%
%% Arguments:
%%   fileIdx - file index
%%   attrib - A model attribute name
%function LibGetSourceFileAttribute(fileIdx, attrib)
    %if TYPE(fileIdx) != "Number"
        %if TYPE(fileIdx) == "Scope"
            %assign fileIdx = fileIdx.Index
        %else
            %assign errTxt = "LibGetSourceFileSection expects an index or a " ...
                "reference to a file."
            %<LibReportError(errTxt)>
        %endif
    %endif

    %switch attrib
      %case "Name"
      %case "BaseName"
      %case "Type"
      %case "Creator"
      %case "Filter"
      %case "IsEmpty"
      %case "OutputDirectory"
      %case "Group"
      %case "WrittenToDisk"
      %case "CodeTemplate"
        %return LibGetModelFileAttribute(fileIdx,attrib)
      %case "SystemsInFile"
      %case "RequiredIncludes"
      %case "UtilityIncludes"
      %case "Indent"
      %case "Shared"
      %case "SharedType"
        %assign opFile = ::CompiledModel.ModelFiles.ModelFile[fileIdx]
        %return SLibDirectAccessGetFileAttribute(opFile, attrib)
      %default
        %assign errTxt = "Unknown file attribute: %<attrib>"
        %<LibReportFatalError(errTxt)>
    %endswitch
%endfunction

%% Function: LibGetModelFileAttribute ==============================================================
%% Abstract:
%%   (MathWorks internal function.  External users, use LibGetSourceFileSection
%%   or LibGetSourceFileAttribute instead.)
%%   Gets a specified section of a file.
%%
%% Arguments:
%%   fileIdx - file index
%%   attrib - either a top-level field name or a sub-field of Contents

%function LibGetModelFileAttribute(fileIdx, attrib) void

    %assign opFile = ::CompiledModel.ModelFiles.ModelFile[fileIdx]

    %% After LibClearModelFileBuffers() is called, Contents will not
    %% exist. However, still allow access to Name, BaseName, Type and Creator.
    %if ISFIELD(opFile,"Contents")
        %assign c = opFile.Contents
    %endif

    %switch attrib
      %case "Name"
      %case "NameWithoutExtension"
        %return GET_FILE_ATTRIBUTE(opFile.Index, attrib)
      %case "BaseName"
        %assign baseName = GET_FILE_ATTRIBUTE(opFile.Index, "BaseName")
        %assign type = GET_FILE_ATTRIBUTE(opFile.Index, "Type")
        %return LibGetFullFileName(baseName, type)
      %case "Type"
      %case "Creator"
      %case "Filter"
      %case "IsEmpty"
      %case "OutputDirectory"
      %case "Group"
      %case "WrittenToDisk"
      %case "CodeTemplate"
        %return SLibDirectAccessGetFileAttribute(opFile, attrib)
      %case "Banner"
        %return SLibDirectAccessGetFileContent(opFile, attrib)
      %case "Includes"
        %% This prepends the RequiredIncludes to the Includes,
        %% but otherwise goes through the same steps as the
        %% the other fields of Contents (below)
        %<FcnAppendMissingTokens(opFile,attrib)> %% inserts from CustomContents if needed
        %% Roll together the RequiredIncludes, if any.
        %% Note what we have in the array is just the include filenames,
        %% so the code below wraps these in an "#include \"<filename>\"" directive.
        %assign includesContent = SLibDirectAccessGetFileContent(opFile, attrib)
        %<FcnAddCoderTypesFilesToRequiredIncludes(opFile)>

        %assign retValue = ""
        %assign retValue = GET_FILE_ATTRIBUTE(opFile.Index, attrib)
        %return retValue
      %case "Defines"
      %case "IntrinsicTypes"
      %case "PrimitiveTypedefs"
      %case "UserTop"
      %case "Typedefs"
      %case "GuardedIncludes"
      %case "Enums"
      %case "Definitions"
      %case "ExternData"
      %case "ExternFcns"
      %case "FcnPrototypes"
      %case "Declarations"
      %case "Functions"
      %case "CompilerErrors"
      %case "CompilerWarnings"
      %case "Documentation"
      %case "UserBottom"
      %case "ModelTypesIncludes"
      %case "ModelTypesDefines"
      %case "ModelTypesTypedefs"
        %% This inserts from the CustomContents section, if needed
        %<FcnAppendMissingTokens(opFile,attrib)>
        %assign content = GET_FILE_ATTRIBUTE(opFile.Index, attrib)
        %if !WHITE_SPACE(content)
            %return "\n" + content
        %else
            %return ""
        %endif
      %default
        %assign errTxt = "Unknown file attribute: %<attrib>"
        %<LibReportFatalError(errTxt)>
    %endswitch
%endfunction  %% LibGetModelFileAttribute

%% Function: LibClearModelFileBuffers ==============================================================
%% Abstract:
%%   Clear the variables associated with Model File contents.
%%
%function LibClearModelFileBuffers() void
    %if ResetTLCGlobalsAfterUse
        %assign success = CLEAR_FILE_BUFFERS()
    %endif
%endfunction


%% Function: LibWriteToStandardOutput ==============================================================
%% Abstract:
%%   Write text to the MATLAB command window.
%%
%function LibWriteToStandardOutput(txt) void
    %selectfile STDOUT
    %if RTWVerbose
%%}}
%<txt>
%%{{
    %endif
    %closefile STDOUT %% not really closing, but to diactivate the current buffer
    %% and return the previous buffer, if any.
%endfunction  %% LibWriteToStandardOutput


%% Function: LibSetCodeTemplateComplianceLevel =====================================================
%% Abstract:
%%   Synchronize a custom code template.  This function must be
%%   called from a code template.
%%
%function LibSetCodeTemplateComplianceLevel(level) void
    %assign ::CompiledModel.ModelFiles.ComplianceLevel = level
%endfunction

%% [EOF] codetemplatelib.tlc
