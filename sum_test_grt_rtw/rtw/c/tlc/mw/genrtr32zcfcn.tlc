%%
%%
%%
%% Abstract:
%%   TLC file for generating rt_R32ZCFcn function via Target Function
%%   Library (TFL).
%%
%% Copyright 2003-2023 The MathWorks, Inc.

%implements "genrtr32zcfcn" "C"

%% Function: rt_R32ZCFcn ===========================================================================
%% Abstract:
%%      GENERATE entry point for Target Function Library TLC callbacks. Creates
%%      header and source file contents for rt_R32ZCFcn
%%
%function rt_R32ZCFcn(fctInfo,fileH,fileC) void
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign real32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)

    %assign zcfcnStr = "rt_R32ZCFcn"

    %% Create header file contents
    %openfile buf
    /*
    * %<fctInfo.FileName>.h
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_banner", fileH, buf)>

    %openfile buf
    %<LibEmitPlatformTypeIncludes()>
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_incl", fileH, buf)>

    %openfile buf

    %if LibUseOldFilePackagingInfrastructure()
        %if SLibRemoveSimstrucFromRtwtypes()
            %if ::CompiledModel.CodeFormat == "S-Function"
                #include "simstruc_types.h"
            %else
                #include "%<SLibCoderZerocrossingTypesFilename()>"
            %endif
        %elseif SLibIsERTTarget()
            %% In ERT mode include zero crossing types header; if not ERT, these
            %% definitions are provided by the main types definitions file.
            #include "%<SLibCoderZerocrossingTypesFilename()>"
        %endif
    %endif

    #ifndef slZcHadEvent
    #define slZcHadEvent(ev, zcsDir) (((ev) & (zcsDir)) != 0x00 )
    #endif
    %closefile buf
    %<SLibCacheMacroToUtilityFile("slZcHadEvent", buf, "util_hdr_defines", fileH)>
    %openfile buf
    #ifndef slZcUnAliasEvents
    #define slZcUnAliasEvents(evL,  evR) \
    ((((slZcHadEvent((evL), (SL_ZCS_EVENT_N2Z)) && \
    slZcHadEvent((evR), (SL_ZCS_EVENT_Z2P))) || \
    (slZcHadEvent((evL), (SL_ZCS_EVENT_P2Z)) && \
    slZcHadEvent((evR), (SL_ZCS_EVENT_Z2N)))) ? \
    (SL_ZCS_EVENT_NUL) : (evR)))
    #endif
    %closefile buf
    %<SLibCacheMacroToUtilityFile("slZcUnAliasEvents", buf, "util_hdr_defines", fileH)>

    %assign msFcn = SLibGetMemSecCategoryForUtilityFcn()
    %assign fcnName = zcfcnStr
    %openfile buf
    %<FcnGenOpenExternCForCPP()>
    %<SLibGetFcnMemSecPragmaOnDecl(fcnName, msFcn, "Pre")>\
    %<LibStaticOrExternInFcnDecls()>ZCEventType %<zcfcnStr>(ZCDirection zcDir, \
    ZCSigState *prevZc, \
    %<real32Type>     currValue);
    %<SLibGetFcnMemSecPragmaOnDecl(fcnName, msFcn, "Post")>\
    %<FcnGenCloseExternCForCPP()>
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_hdr_decl", fileH, buf)>

    %% Create source file contents
    %openfile buf
    /*
    * %<fctInfo.FileName>.%<LangFileExt>
    *
    %<SLibCommonUtilHeaderInfo()>\
    */
    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_banner", fileC, buf)>

    %openfile buf
    #include "rt_r32zcfcn.h"

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_incl", fileC, buf)>

    %openfile buf
    %if GenCPP
        extern "C" {
    %endif
    %assign fcnReturns = "ZCEventType"
    %assign fcnParams = "ZCDirection zcDir, ZCSigState* prevZc, %<real32Type> currValue"
    %assign fcnAbstract = "Detect zero crossings events."
    %assign functionSpecifier = LibStaticInFcnDecls()
    %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; Abstract fcnAbstract; ...
        Category "utility"; GeneratedBy "genrtzcfcn.tlc"}
    %<SLibDumpFunctionBanner(fcnRec)>
    %undef fcnRec
    %assign equalSign = LibGetDataInitEqualSign()
    %assign scalarTokens = LibGetScalarDataInitTokens()
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Pre")>\
    %<functionSpecifier> %<fcnReturns> %<fcnName>(%<fcnParams>)
    {
        slZcEventType zcsDir;
        slZcEventType tempEv;
        ZCEventType   zcEvent%<scalarTokens[0]>NO_ZCEVENT%<scalarTokens[1]>; /* assume */

        /* zcEvent matrix */
        static const slZcEventType eventMatrix[4][4]%<equalSign>{
            /*          ZER              POS              NEG              UNK */
            {SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_Z2P,SL_ZCS_EVENT_Z2N,SL_ZCS_EVENT_NUL},/* ZER */
            {SL_ZCS_EVENT_P2Z,SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_P2N,SL_ZCS_EVENT_NUL},/* POS */
            {SL_ZCS_EVENT_N2Z,SL_ZCS_EVENT_N2P,SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_NUL},/* NEG */
            {SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_NUL,SL_ZCS_EVENT_NUL} /* UNK */
        };

        /* get prevZcEvent and prevZcSign from prevZc */
        slZcEventType         prevEv%<scalarTokens[0]>(slZcEventType)(((%<uint8Type>)(*prevZc)) >> 2)%<scalarTokens[1]>;
        slZcSignalSignType  prevSign%<scalarTokens[0]>(slZcSignalSignType)(((%<uint8Type>)(*prevZc)) & (%<uint8Type>)0x03)%<scalarTokens[1]>;

        /* get current zcSignal sign from current zcSignal value */
        slZcSignalSignType currSign%<scalarTokens[0]>(slZcSignalSignType)((currValue) > 0.0 ? SL_ZCS_SIGN_POS :
        ((currValue) < 0.0 ? SL_ZCS_SIGN_NEG : SL_ZCS_SIGN_ZERO))%<scalarTokens[1]>;

        /* get current zcEvent based on prev and current zcSignal value */
        slZcEventType      currEv  %<scalarTokens[0]> eventMatrix[prevSign][currSign]%<scalarTokens[1]>;

        /* get slZcEventType from ZCDirection */
        switch (zcDir) {
            case ANY_ZERO_CROSSING:
            zcsDir = SL_ZCS_EVENT_ALL;
            break;
            case FALLING_ZERO_CROSSING:
            zcsDir = SL_ZCS_EVENT_ALL_DN;
            break;
            case RISING_ZERO_CROSSING:
            zcsDir = SL_ZCS_EVENT_ALL_UP;
            break;
            default:
            zcsDir = SL_ZCS_EVENT_NUL;
            break;
        }

        /*had event, check if double zc happend remove double detection. */
        if ( slZcHadEvent(currEv, zcsDir)) {
            currEv = (slZcEventType)(slZcUnAliasEvents(prevEv, currEv));
        } else{
            currEv =  SL_ZCS_EVENT_NUL;
        }

        /* Update prevZc */
        tempEv    = (slZcEventType)(currEv << 2); /* shift left by 2 bits */
        *prevZc   = (ZCSigState)((currSign) | (tempEv));

        if ((currEv & SL_ZCS_EVENT_ALL_DN) != 0) {
            zcEvent =  FALLING_ZCEVENT;
        }else if ((currEv & SL_ZCS_EVENT_ALL_UP) != 0){
            zcEvent =  RISING_ZCEVENT;
        }else{
            zcEvent =  NO_ZCEVENT;
        }

        return zcEvent;
    } /* %<zcfcnStr> */
    %<SLibGetFcnMemSecPragma(fcnName, msFcn, "Post")>\

    %if GenCPP
    }
    %endif

    %closefile buf
    %<SLibCacheUtilCodeToFile("util_src_fcn_defn", fileC, buf)>

    %assign headerFile = SLibGetFullFileNameForUtilCode("util_hdr_decl", fileH)
    %assign sourceFile = SLibGetFullFileNameForUtilCode("util_src_fcn_defn", fileC)
    %assign declDeps = [ %<SLibVarGroupBasicTypesAll()>, "ZCEventType", "ZCDirection", "ZCSigState" ]
    %assign defnDeps = [ "slZcEventType" ]
    %<SLibAddEntryToFunctionTable(fcnName, headerFile, sourceFile, declDeps, defnDeps)>

    %% The above dependency on slZcEventType results in inclusion of solver_zc.h.  solver_zc.h is a
    %% static header file under matlabroot and in turn has a dependency on rtwtypes.h. This header
    %% file must be added to buldInfo to ensure that rtwtypes.h will be generated.
    %<SLibAddSolverZcToBuildInfo()>

%endfunction
