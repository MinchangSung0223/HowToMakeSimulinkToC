%%
%%
%%
%%
%% Copyright 1994-2023 The MathWorks, Inc.
%%
%% Description:
%%   This TLC library file contains function for caching special block
%%   code into the various model files.

%if EXISTS(_CACHELIB_) == 0
%assign ::_CACHELIB_ = 1

%include "codecache_api.tlc"

%<LibAddToCompiledModel("SourceCodeCache", "")>
%<LibAddToCompiledModel("NonFiniteParamAssignmentsCache", "")>
%<LibAddToCompiledModel("NonFiniteBlockIOAssignmentsCache", "")>
%<LibAddToCompiledModel("GlobalPrmDataCache", "")>
%% Adding sfunctiondata to Compiled model for the purpose of guarding header files with variant condition.
%<LibAddToCompiledModel("sfunctiondata", "")>
%<LibAddToCompiledModel("NumFiles", 0)>

%% If we're in a codegen context build, we need to redirect all extern decl
%% that were intended for model.h and model_private.h to subsystem.h
%function FcnCacheSFunctionExternDeclToRLS(buffer) void
    %if !CGMODEL_ACCESS("CGModel.isCodeGenContextBuild")
        %return
    %endif

    %assign sysIdx = CGMODEL_ACCESS("CGModel.getCUTSysIdx")
    %assign system = ::CompiledModel.System[sysIdx]
    %% Cache the extern decl in subsystem.h
    %<SLibCacheSystemCodeToFile("sys_standalone_extern_data_decl", system, buffer)>
%endfunction

%function AddSfuncHeadersToRLSIncludes() void
    %assert(SLibIsMainCodeGenPhase())
    %foreach sysIdx = ::CompiledModel.NumSystems
        %foreach blkIdx = ::CompiledModel.System[sysIdx].NumBlocks
            %assign includesForBlock = CGMODEL_ACCESS("Block.GetIncludeFiles", sysIdx, blkIdx)
            %assign numIncludesForBlock = SIZE(includesForBlock, 1)
            %with ::CompiledModel.System[sysIdx].Block[blkIdx]
                %foreach incIdx = numIncludesForBlock
                    %<SAddSfuncHeaderToRLSIncludes(includesForBlock[incIdx])>
                %endforeach
            %endwith
        %endforeach
    %endforeach

%endfunction

%% Register any extern declaration cache generated for the blocks in the pre-code
%% gen phase processing, for moving to the subsystem.h
%if SLibIsMainCodeGenPhase()
    %assign buffer = CGMODEL_ACCESS("CustomCodeCache.GetCache", ::CustomCodeCacheType.Extern, TLC_FALSE)
    %if !ISEMPTY(buffer)
        %<FcnCacheSFunctionExternDeclToRLS(buffer)>;
    %endif
    %<AddSfuncHeadersToRLSIncludes()>
%endif

%% Function: LibTrapCacheAssert ====================================================================
%% Abstract:
%%   LibTrapCacheAssert determines if the access of a cache variable
%%   is valid (i.e. cacheVar should not be a Number).  If the access is
%%   a number this function generates an error, prints the TLC
%%   call stack and exits.
%%
%function LibTrapCacheAssert(cacheVar) void
    %if TYPE(cacheVar) == "Number"
        %openfile assertTxt


        Attempt to access a cache variable prior to calling its cache \
        generation function.

        The current cache:

        %<cacheVar>
        %closefile assertTxt
        %<LibReportFatalError(assertTxt)>
    %endif
%endfunction

%% Function: SLibCacheNonFiniteConstBIOAssignment ==================================================
%% Abstract:
%%   SLibCacheNonFiniteConstBIOAssignment is called to cache assignments which
%%   need to be placed in the registration function because of non-finite
%%   initialization.  That is, rtInfs, rtNaNs, and rtMinusInfs parameters are
%%   initialized to zero until the registration function is called,
%%   re-initializing them to their appropriate value.  Each call to this function
%%   appends your buffer to the existing cache buffer.
%%
%%   Arguments:
%%        sysIdx:  index for the system to generate initialization
%%        instIdx: instance index of the system.
%%        buffer:  Buffer to be cached for placement inside the model's
%%           registration function.
%%   Example:
%%        %openfile buffer
%%          rtP.block.param_1 = %<LibRealNonFinite(inf)>;
%%          rtP.block.param_i = %<LibRealNonFinite(nan)>;
%%          rtP.block.param_n = %<LibRealNonFinite(-inf)>;
%%        %closefile buffer
%%        %<SLibCacheNonFiniteConstBIOAssignment(sysIdx,buffer)>
%%
%function SLibCacheNonFiniteConstBIOAssignment(sysIdx, instIdx, buffer) void
    %% The root system may have an instance index of -1, map it back to 0
    %assign instIdx = (instIdx == -1) ? 0 : instIdx
    %assign sysIdx = System[sysIdx].StandaloneParentSysIdx[instIdx]

    %if sysIdx != -1
        %<LibAddToSystemField(System[sysIdx],"CachedNonFiniteBlockIOAssignments",buffer)>
        %if SLibRealNonFinitesRequired() && (!SLibSupportNonfiniteLiterals() || ::GenCPP)
            %% include rt_nonfinite.h for rt non-finite constants
            %<SLibUpdateHeadersNeededByFile(SLibGetFullFileNameForSystemCode("sys_src_incl", sysIdx), "rt_nonfinite.h")>
        %endif
    %else
        %% Cache in model initialization
        %assign ::CompiledModel.NonFiniteBlockIOAssignmentsCache = ...
            ::CompiledModel.NonFiniteBlockIOAssignmentsCache + buffer
    %endif
%endfunction

%% Function: SLibCacheNonFiniteParamAssignment =====================================================
%% Abstract:
%%   SLibCacheNonFiniteParamAssignment is used to cache run-time parameter
%%   nonfinite initialization. Parameters can be shared across systems and are
%%   required to initialize nonfinites they use in their initialization function.
%%   Each call to this function appends your buffer to the existing cache buffer.
%%
%%   Arguments:
%%        mdlParam: ModelParamter that has the nonfinite initialization code
%%        buffer: Code buffer to be cached
%%
%function SLibCacheNonFiniteParamAssignment(mdlParam, buffer) void
    %if SIZE(mdlParam.ReferencedBy,0) == 1
        %% Single reference, initialize with standalone subsystem
        %assign sysIdx = mdlParam.OwnerSysIdx[0]
        %% The root system may have an instance index of -1, map it back to 0
        %assign instIdx = (mdlParam.OwnerSysIdx[1] == -1) ? 0 : mdlParam.OwnerSysIdx[1]
        %assign sysIdx = ::CompiledModel.System[sysIdx].StandaloneParentSysIdx[instIdx]
        %if sysIdx != -1
            %<LibAddToSystemField(System[sysIdx],"CachedNonFiniteParamAssignments",buffer)>
            %if SLibRealNonFinitesRequired() && (!SLibSupportNonfiniteLiterals() || ::GenCPP)
                %% include rt_nonfinite.h for rt non-finite constants
                %<SLibUpdateHeadersNeededByFile(SLibGetFullFileNameForSystemCode("sys_src_incl", sysIdx), "rt_nonfinite.h")>
            %endif
            %return
        %endif
    %endif
    %% Cache in model initialization
    %assign ::CompiledModel.NonFiniteParamAssignmentsCache = ...
        ::CompiledModel.NonFiniteParamAssignmentsCache + buffer
%endfunction

%% Function: LibDumpNonFiniteAssignmentCache =======================================================
%% Abstract:
%%   LibDumpNonFiniteAssignmentCache dumps the non-finite assignments cache
%%   to the output buffer.
%%
%function LibDumpNonFiniteAssignmentCache() Output
    %% See Also:
    %%      LibCacheNonFiniteAssignment
    %%
    %% Dump Standalone subsystem nonfinite assignments
    %foreach sysIdx = NumSystems
        %if System[sysIdx].StandaloneSubsystem
            %assign buffer = LibGetSystemField(System[sysIdx], "CachedNonFiniteParamAssignments") + ...
                LibGetSystemField(System[sysIdx], "CachedNonFiniteBlockIOAssignments")

            %if !WHITE_SPACE(buffer)
                %openfile nonfiniteBuffer

                /* non-finite (run-time) assignments */
                %<buffer>
                %closefile nonfiniteBuffer
                %<LibAddToSystemField(System[sysIdx],"CachedInitializeDataBody", ...
                    nonfiniteBuffer)>
            %endif
        %endif
    %endforeach
    %% Also dump root model nonfinite assignments, initialize function is called
    %% separately.
    %assign buffer = ::CompiledModel.NonFiniteParamAssignmentsCache + ...
        ::CompiledModel.NonFiniteBlockIOAssignmentsCache
    %if (!WHITE_SPACE(buffer))

        /* non-finite (run-time) assignments */
        %<buffer>
    %endif
%endfunction

%% If we're in a codegen context build, we'll throw away model.h and model_private.h,
%% Whatever defines were cached to model files should be redirected to subsystem.h
%function FcnCacheSFunctionDefinesToRLS(buffer) void
    %if !CGMODEL_ACCESS("CGModel.isCodeGenContextBuild")
        %return
    %endif
    %assign sysIdx = CGMODEL_ACCESS("CGModel.getCUTSysIdx")
    %assign system = ::CompiledModel.System[sysIdx]
    %% Cache the extern decl in subsystem.h
    %<SLibCacheSystemCodeToFile("sys_hdr_define", system, buffer)>
%endfunction

%function FcnScanForDuplicateIncludes(incFileName) void
    %assign duplicate = 0
    %foreach idx = ::CompiledModel.NumNonSharedPathHeaders
        %if (::CompiledModel.NonSharedPathHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %foreach idx = ::CompiledModel.NumNonSharedLocalHeaders
        %if (::CompiledModel.NonSharedLocalHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %foreach idx = ::CompiledModel.NumSysPathHeaders
        %if (::CompiledModel.SysPathHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %foreach idx = ::CompiledModel.NumSysLocalHeaders
        %if (::CompiledModel.SysLocalHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %foreach idx = ::CompiledModel.NumBlockPathHeaders
        %if (::CompiledModel.BlockPathHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %foreach idx = ::CompiledModel.NumBlockLocalHeaders
        %if (::CompiledModel.BlockLocalHeaders[idx] == incFileName)
            %assign duplicate = 1
            %break
        %endif
    %endforeach
    %return duplicate
%endfunction

%% Function: SLibAddToCommonIncludes ===============================================================
%% Abstract:
%%   Adds items to a unique-ified list of #include/package spec items.
%%
%%   Should be called from non-block TLC methods to specify generation of
%%   #include statements.  Local includes are specified bare, "myinclude.h",
%%   and include path files are specified in braces, "<sysinclude.h>". Each
%%   call to this function adds the file to the list only if it is not already
%%   there.  <math.h> and "math.h" are considered different files for the
%%   purpose of uniqueness. The #include statements are placed inside
%%   model.h.
%%
%%   This "S" version of adding to common includes adds the include file
%%   above all of the files added by LibAddToCommonIncludes, but below any
%%   filenames already added by this function.
%%
%%   Example:
%%     %<SLibAddToCommonIncludes("<assert.h>")>
%%
%%
%function SLibAddToCommonIncludes(incFileName) void
    %%
    %% ignore empties
    %%
    %if incFileName == ""
        %return
    %endif

    %if incFileName[0] == "<"
        %<CGMODEL_ACCESS("Includes.AddToModelHeaderCache", ::ModelHeaderType.SysPath, incFileName)>
        %return
    %endif

    %<CGMODEL_ACCESS("Includes.AddToModelHeaderCache", ::ModelHeaderType.SysLocal, incFileName)>
%endfunction

%% Function: SLibAddArrayToNonSharedIncludes =======================================================
%% Abstract:
%%   Wrapper around SLibAddToCommonIncludes that takes an array of include
%%   files.
%function SLibAddArrayToNonSharedIncludes(incFileNameArray) void
    %assign numIncludes = SIZE(incFileNameArray, 1)
    %foreach idx = numIncludes
        %<SLibAddToNonSharedIncludes(incFileNameArray[idx])>
    %endforeach
%endfunction

%% Function: SLibAddToNonSharedIncludes ============================================================
%% Abstract:
%%   This function is like SLibAddToCommonIncludes, but files added with
%%   this function will not be included in functions from subsystems that
%%   are reused across model builds.
%%
%%   Example:
%%     %<SLibAddToNonSharedIncludes("<assert.h>")>
%%
%%
%function SLibAddToNonSharedIncludes(incFileName) void
    %%
    %% ignore empties
    %%
    %if incFileName == ""
        %return
    %endif

    %if incFileName[0] == "<"
        %<CGMODEL_ACCESS("Includes.AddToModelHeaderCache", ::ModelHeaderType.NonSharedPath, incFileName)>
        %return
    %endif

    %<CGMODEL_ACCESS("Includes.AddToModelHeaderCache", ::ModelHeaderType.NonSharedLocal, incFileName)>
%endfunction


%% Function: SLibDumpCommonIncludes ================================================================
%% Abstract:
%%   Call this function once from within a target's ___hdr.tlc file
%%   to generate the accumulated includes specified by the target, the
%%   code format, and all the blocks.
%%
%function SLibDumpCommonIncludes(system) void
    %assign isSFcn = (CodeFormat == "S-Function")
    %assign inclBuff = ""
    %assign isRLS = LibSystemIsReusedLibraryFcn(system)
    %if isRLS
        %return
    %else
        %assign ifndefName = Name
    %endif
    %openfile inclBuff
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.SysPath)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        #include %<incFileName>
    %endforeach
    %foreach idx = ::CompiledModel.NumSysPathHeaders
        %assign incFileName = ::CompiledModel.SysPathHeaders[idx]
        #include %<incFileName>
    %endforeach
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.NonSharedPath)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        #include %<incFileName>
    %endforeach
    %foreach idx = ::CompiledModel.NumNonSharedPathHeaders
        %assign incFileName = ::CompiledModel.NonSharedPathHeaders[idx]
        #include %<incFileName>
    %endforeach
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.BlockPath)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        #include %<incFileName>
    %endforeach
    %foreach idx = ::CompiledModel.NumBlockPathHeaders
        %assign incFileName = ::CompiledModel.BlockPathHeaders[idx]
        #include %<incFileName>
    %endforeach
    %if isSFcn
        %<LibSFcnPreSimstrucDefines(system)>
    %endif
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.SysLocal)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        #include %<"\"%<incFileName>\"">
    %endforeach
    %foreach idx = ::CompiledModel.NumSysLocalHeaders
        %assign incFileName = ::CompiledModel.SysLocalHeaders[idx]
        #include %<"\"%<incFileName>\"">
    %endforeach
    %if ISEQUAL(::ConfigSet.InferredTypesCompatibility, TLC_TRUE)
        %% && !ISEQUAL(::ConfigSet.SupportNonInlinedSFcns, TLC_TRUE)
        #define __TMWTYPES__ /* Inferred types compatibility mode */
    %endif
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.NonSharedLocal)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        #include %<"\"%<incFileName>\"">
    %endforeach
    %foreach idx = ::CompiledModel.NumNonSharedLocalHeaders
        %assign incFileName = ::CompiledModel.NonSharedLocalHeaders[idx]
        #include %<"\"%<incFileName>\"">
    %endforeach
    %assign atleastOneHeaderVariant = TLC_FALSE
    %assign headers = CGMODEL_ACCESS("Includes.GetModelHeaderCache", ::ModelHeaderType.BlockLocal)
    %assign numHeaders = SIZE(headers)[1]
    %foreach idx = numHeaders
        %assign incFileName = headers[idx]
        %assign fileVarCond = CGMODEL_ACCESS("FileRepository.getFileVariantCondition",incFileName)
        %if !ISEMPTY(fileVarCond) && atleastOneHeaderVariant == TLC_FALSE
            %assign atleastOneHeaderVariant = TLC_TRUE
        %endif
        %if !ISEMPTY(fileVarCond)
            #if %<fileVarCond>
            #include %<"\"%<incFileName>\""> %% Guarding the header file with the variant condition
            #endif
        %else
            #include %<"\"%<incFileName>\"">
        %endif

    %endforeach
    %foreach idx = ::CompiledModel.NumBlockLocalHeaders
        %assign incFileName = ::CompiledModel.BlockLocalHeaders[idx]
        %assign fileVarCond = CGMODEL_ACCESS("FileRepository.getFileVariantCondition",incFileName)
        %if !ISEMPTY(fileVarCond) && atleastOneHeaderVariant == TLC_FALSE
            %assign atleastOneHeaderVariant = TLC_TRUE
        %endif
        %if !ISEMPTY(fileVarCond)
            #if %<fileVarCond>
            #include %<"\"%<incFileName>\""> %% Guarding the header file with the variant condition
            #endif
        %else
            #include %<"\"%<incFileName>\"">
        %endif

    %endforeach
    %if isSFcn
        %<LibSFcnPostSimstrucDefines()>
    %endif
    %closefile inclBuff

    %assign retBuff = ""
    %if !WHITE_SPACE(inclBuff)
        %openfile retBuff
        %if !CGMODEL_ACCESS("CGModel.RemoveCommonIncludesGuards")
            #ifndef %<ifndefName>_COMMON_INCLUDES_
            #define %<ifndefName>_COMMON_INCLUDES_
        %endif
        %<inclBuff>
        %if !CGMODEL_ACCESS("CGModel.RemoveCommonIncludesGuards")
            #endif /* %<ifndefName>_COMMON_INCLUDES_ */
        %endif

        %closefile retBuff
    %endif

    %% If the NumBlockLocalHeaders is zero, this will make sure that the fileVarCond is defined
    %if ((numHeaders == 0) && (::CompiledModel.NumBlockLocalHeaders == 0))
        %assign fileVarCond=""
    %endif

    %if atleastOneHeaderVariant==TLC_TRUE
        %% Caching it to sfunctiondata for dumping it after the emission of variant variable V in the generated code
        %assign ::CompiledModel.sfunctiondata =::CompiledModel.sfunctiondata + retBuff
    %else
        %% If the S-function block is unconditional, just return the buffer
        %return retBuff
    %endif

%endfunction

%% Function: LibDumpsfunctiondata ==================================================================
%% Abstract:
%%   Dumps the information stored in ::Compiledmodel.sfunctiondata
%%
%% TopTester: test/toolbox/simulink/variants/var-global-dataguarding/tSFunctionHeaderGuarding.m
%function LibDumpsfunctiondata() Output
    %if !WHITE_SPACE(sfunctiondata)
        %return "\n%<sfunctiondata>"
    %else
        %return
    %endif
%endfunction

%% Function: SLibCacheSourceCode ===================================================================
%% Abstract:
%%   This function should be called from inside BlockInstanceSetup to cache
%%   source code at the top of model.c.  The buffer is added to the existing
%%   cache buffer.
%%
%%   Example:
%%        %openfile buffer
%%        void myfunc(int i) {
%%          i++;
%%        }
%%        %closefile buffer
%%        %<SLibCacheSourceCode(buffer)>
%%
%function SLibCacheSourceCode(buffer) void
    %assign ::CompiledModel.SourceCodeCache = ...
        ::CompiledModel.SourceCodeCache + buffer
%endfunction

%% Function: SLibDumpSourceCodeCache ===============================================================
%% Abstract:
%%      Dump any source code that was cached with either SLibCacheSourceCode()
%%      or LibAddToFile().
%%
%function SLibDumpSourceCodeCache() Output
    %% Dump any source code from SLibCacheSourceCode
    %if !WHITE_SPACE(SourceCodeCache)

        %<SourceCodeCache>\
    %endif
    %<SLibResetTLCGlobal("SourceCodeCache")>\
    %% Create(dump) any files from LibAddtoFiles
    %foreach idx = ::CompiledModel.NumFiles
        %openfile file = ::CompiledModel.Files.Name[idx]
        %<::CompiledModel.Files.File[idx]>
        %closefile file
        %<SLibAddGeneratedFileToList(::CompiledModel.Files.Name[idx] ,"other","other","")>
        %if ResetTLCGlobalsAfterUse
            %assign ::CompiledModel.Files.File[idx] = 0
        %endif
    %endforeach
%endfunction

%% Function: LibCacheGlobalPrmData =================================================================
%% Abstract:
%%   LibCacheGlobalPrmData should be called from inside BlockInstanceSetup
%%   to cache global block parameter data.  Each call to this function
%%   appends your buffer to the existing cache buffer.  The global data
%%   is placed inside model.c.  Note that only functions in model.c will
%%   be able to see this data.  For other files (ie subsystem files) to see
%%   this data, you must extern it in the model_private.h file.
%%
%%   Example:
%%        %openfile buffer
%%          double A[] = {1.0, 0.0, 0.0 };
%%        %closefile buffer
%%        %<LibCacheGlobalPrmData(buffer)>
%%
%function LibCacheGlobalPrmData(buffer) void
    %if UsingMalloc

        %openfile errTxt
%%}}
Attempting to declare global parameter data using TLC function
LibCacheGlobalPrmData.

Declaring global parameter data is not consistent with dynamic ...
    memory allocation.  Perhaps you should create the data in the ...
    block's start function.

For example, assume a block requires constant and non-constant ...
    data.  The block creates the data in the start function and stores ...
    the location of the data in its PWork.  References to the data ...
    outside the start function are realized via the block PWork.

%<"%function Start(block, system) Output">
/* initialize data (containing non-finites) */
{
    static %<"%<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)>"> nonFiniteData[] = { 1.0, 0.0, 27.2, 0.0 };

    nonFiniteData[1] = %<"%<LibRealNonFinite(inf)>">;
    nonFiniteData[3] = %<"%<LibRealNonFinite(nan)>">;

    %<"%<LibBlockPWork(ConstNonFiniteData,"","",0)> = ">
    &nonFiniteData[0];
}

/* initialize data (all finite) */
{
    static const  %<"%<LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)>"> finiteData[] = { 1.0, 12.0, 27.2, 45.0 };
    %<"%<LibBlockPWork(ConstFiniteData,"","",0)> =">
    &finiteData[0];
}

/* allocate memory for non-constant data */
{
    SomeDataType *data;
    data = (SomeDataType *) malloc(sizeof(SomeDataType));
    VALIDATE_MEMORY(%<"%<RTMGetModelSS()>">, data);
    %<"%<LibBlockPWork(NonConstData,"","",0)> = data;">
}
%<"%endfunction">

Note that static data is only declared with the "const" keyword if ...
    the data does not contain non-finites since rtInf, rtMinusInf, and ...
    rtNaN are not initialized until run time.

Also note that the TLC references ConstNonFiniteData, ConstFiniteData, ...
    and NonConstData are made possible with either the TLC function ...
    LibDefinePWork or with the S-function's mdlRTW function.
%%{{
        %closefile errTxt
        %<SLibReportErrorWithId("RTW:tlc:GenericMsg", errTxt)>
    %endif


    %assign ::CompiledModel.GlobalPrmDataCache = ...
        ::CompiledModel.GlobalPrmDataCache + buffer
%endfunction

%% Function: LibDumpGlobalPrmDataCache =============================================================
%% Abstract:
%%   Place any cached global parameter data into the output stream.
%%
%function LibDumpGlobalPrmDataCache() Output
    %if !WHITE_SPACE(GlobalPrmDataCache)

        %<GlobalPrmDataCache>\
    %endif
    %<SLibResetTLCGlobal("GlobalPrmDataCache")>\
%endfunction

%% Function: LibGetFieldSet ========================================================================
%% Abstract:
%%   We have places in the code where we assert that a field exists or
%%   doesn't exist to ensure another utility function has been called.
%%   This function is intended to give that same functionality when
%%   default values exist, thus rendering ISFIELD useless.
%%
%function LibGetFieldSet(scope, fieldName) void
    %if ConfigSet.TLCAssert
        %return ISFIELD(scope, "FieldSet" + fieldName)
    %else
        %return 1
    %endif
%endfunction

%% Function: LibGetFieldSet ========================================================================
%% Abstract:
%%   See LibGetFieldSet
%%
%function LibSetFieldSet(scope, fieldName) void
    %if ConfigSet.TLCAssert
        %if !ISFIELD(scope, "FieldSet" + fieldName)
            %addtorecord scope FieldSet%<fieldName> 1
        %endif
    %endif
%endfunction

%endif %% _CACHELIB_

%% [EOF] cachelib.tlc
