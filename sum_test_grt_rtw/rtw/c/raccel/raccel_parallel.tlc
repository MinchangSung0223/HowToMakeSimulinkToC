%% ============================================================================
%% File : raccel_parallel.tlc
%%
%% Abstract:
%%   Code for rapid accelerator parallel simulation.
%%
%% 
%% Copyright 2013-2022 The MathWorks, Inc.
%%
%% ============================================================================
%function SLibDumpRapidAcceleratorParallelModelFunctions(numSystems)
    %assign integerType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)
  %openfile ModelFunctions
  %assign hasPeriodicRateGrouping = 0
  %% If there is at lease one system with periodic rate grouping on, use the 
  %% switch case in parallel raccel    
  %foreach sysIdx = numSystems
      %assign moduleIdx   = System[sysIdx].CGIRModuleIdx
      %assign moduleRec   = ::CompiledModel.RTWCGModules.RTWCGModule[moduleIdx]
      %assign periodicRateGrouping = moduleRec.PeriodicRateGrouping
      %if periodicRateGrouping
        %assign hasPeriodicRateGrouping = 1
      %endif  
  %endforeach    
  %if isRAccel && !IsModelReferenceTarget() && CompiledModel.ParallelExecutionInRapidAccelerator && hasPeriodicRateGrouping == 1
   %assign tid01eq = ::CompiledModel.FixedStepOpts.TID01EQ 
   void MdlOutputs(%<integerType> tid) {
     switch(tid) {
       %foreach tidIdx = NumRuntimeExportedRates
         %if !(tid01eq && tidIdx == 1)
         case %<tidIdx>:
            MdlOutputsTID%<tidIdx>(%<tidIdx>);
         break;
         %endif 
       %endforeach
     }
   }
   
   void MdlUpdate(%<integerType> tid) {
     switch(tid) {
       %foreach tidIdx = NumRuntimeExportedRates
         %if !(tid01eq && tidIdx == 1)   
           case %<tidIdx>:
              MdlUpdateTID%<tidIdx>(%<tidIdx>);
           break;
         %endif 
       %endforeach
     }
   }
   
   %endif
  %closefile ModelFunctions
  %return ModelFunctions
%endfunction
